{"version":3,"sources":["App.js","index.js"],"names":["LOCALSTORAGE_KEY","GATE_COLORS","Input","id","x","y","position","state","this","config","input","Output","output","_globalGateId","CircuitBase","inputs","outputs","gates","connections","evaluationFn","inputById","outputById","Set","_inputId","_outputId","color","length","inputIndex","push","outputIndex","gateByOldId","gate","g","constructorClass","oldId","connection","source","destination","type","oldIndex","gateId","nodeId","console","log","add","evaluate","Object","values","allDestinations","forEach","updateNode","gateClass","inputId","splice","indexOf","updateList","split","delete","outputId","allSources","destinations","_source","_destination","sources","value","updateGate","updateOutput","getSourceValue","name","inputsCount","outputsCount","constructor","constructorName","staticName","conn","sourceGate","sourceId","destinationGate","destinationId","createCircuit","Array","from","data","reduce","inputConfig","fromJS","outputConfig","gateConfig","availableGates","concat","customGates","find","gateConstructor","classPointer","globalCircuitId","evalFn","args","JSON","stringify","result","initialArgs","InputNode","rest","className","style","left","top","OutputNode","right","GateNode","onConnectionMade","onRemove","background","onClick","e","shiftKey","circuit","removeGate","stopPropagation","onMouseDown","currentlyMovingGate","startMousePos","clientX","clientY","startGatePos","map","onMouseUp","connectionStart","Connection","x1","y1","x2","y2","start","end","complete","React","useState","updateState","forceUpdate","useCallback","useEffect","setImmediate","startNode","document","getElementById","endNode","startPos","getBoundingClientRect","endPos","width","height","mousePos","saveAppState","toJS","localStorage","setItem","loadAppState","json","getItem","parse","v","availableGateId","EmptyCurcuit","fn","time","timer","debounce","AND_Gate","i1","i2","o1","NOT_Gate","App","onConnection","a","b","addConnection","onMouseMove","xDiff","yDiff","addInput","addOutput","removeInput","toggle","removeOutput","placeholder","nameInput","transformToGate","addGate","removeItem","window","location","reload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7b630e87.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React from \"react\";\n\nconst LOCALSTORAGE_KEY = \"circuit-data\";\nconst GATE_COLORS = [\n  \"e07800\",\n  \"0969d7\",\n  \"b80000\",\n  \"65a300\",\n  \"c31fff\",\n  \"9fb800\",\n  \"00e083\",\n];\n\nconst debounce = (fn, time) => {\n  let timer;\n  return () => {\n    clearTimeout(timer);\n    timer = setTimeout(fn, timer);\n  };\n};\n\nclass Input {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n\n  toggle() {\n    if (this.state === 0) {\n      this.state = 1;\n    } else {\n      this.state = 0;\n    }\n  }\n\n  static fromJS(config) {\n    const input = new Input();\n    input.id = config.id;\n    input.position = config.position;\n    input.state = config.state;\n    return input;\n  }\n}\n\nclass Output {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n\n  static fromJS(config) {\n    const output = new Output();\n    output.id = config.id;\n    output.position = config.position;\n    output.state = config.state;\n    return output;\n  }\n}\n\nlet _globalGateId = 1;\n\nclass CircuitBase {\n  inputs = [];\n  inputById = {};\n\n  outputs = [];\n  outputById = {};\n\n  gates = {};\n  connections = new Set();\n\n  _inputId = 0;\n  _outputId = 0;\n\n  position = { x: 0, y: 0 };\n\n  constructor(inputs, outputs, gates, connections, evaluationFn) {\n    this.id = _globalGateId++;\n    this.color = GATE_COLORS[this.id % GATE_COLORS.length];\n\n    for (let inputIndex = 0; inputIndex < inputs; ++inputIndex) {\n      const input = new Input(`${this.id}:i${this._inputId++}`, 0, 0);\n      this.inputById[input.id] = input;\n      this.inputs.push(input.id);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputs; ++outputIndex) {\n      const output = new Output(`${this.id}:o${this._outputId++}`, 0, 0);\n      this.outputById[output.id] = output;\n      this.outputs.push(output.id);\n    }\n\n    const gateByOldId = {};\n    for (const gate of gates) {\n      const g = new gate.constructorClass();\n      this.gates[g.id] = g;\n      gateByOldId[gate.oldId] = g;\n    }\n\n    for (const connection of connections) {\n      let source,\n        destination = \"\";\n\n      if (connection.source.type === \"self-input\") {\n        source = `${this.id}:i${connection.source.oldIndex}`;\n      } else if (connection.source.type === \"gate-output\") {\n        source = `${gateByOldId[connection.source.gateId].id}:${\n          connection.source.nodeId\n        }`;\n      } else {\n        console.log(\"wtf???\");\n      }\n\n      if (connection.destination.type === \"self-output\") {\n        destination = `${this.id}:o${connection.destination.oldIndex}`;\n      } else if (connection.destination.type === \"gate-input\") {\n        destination = `${gateByOldId[connection.destination.gateId].id}:${\n          connection.destination.nodeId\n        }`;\n      } else {\n        console.log(\"wtf???\");\n      }\n\n      this.connections.add(`${source}-${destination}`);\n    }\n\n    if (evaluationFn) {\n      this.evaluate = () => evaluationFn(this);\n    }\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    for (const input of Object.values(this.inputById)) {\n      this.allDestinations(input.id).forEach((nodeId) =>\n        this.updateNode(nodeId)\n      );\n    }\n  }\n\n  addInput(y) {\n    const input = new Input(`${this.id}:i${this._inputId++}`, 0, y);\n\n    this.inputById[input.id] = input;\n    this.inputs.push(input.id);\n  }\n\n  addOutput(y) {\n    const output = new Output(`${this.id}:o${this._outputId++}`, 0, y);\n\n    this.outputById[output.id] = output;\n    this.outputs.push(output.id);\n  }\n\n  addGate(gateClass, x, y) {\n    const gate = new gateClass(x, y);\n\n    this.gates[gate.id] = gate;\n  }\n\n  addConnection(source, destination) {\n    this.connections.add(`${source}-${destination}`);\n\n    this.updateNode(destination);\n  }\n\n  removeInput(inputId) {\n    delete this.inputById[inputId];\n    this.inputs.splice(this.inputs.indexOf(inputId), 1);\n\n    const updateList = new Set();\n\n    for (const connection of this.connections) {\n      const [source, destination] = connection.split(\"-\");\n      if (source === inputId) {\n        this.connections.delete(connection);\n        updateList.add(destination);\n      }\n    }\n\n    for (const nodeId of updateList) {\n      this.updateNode(nodeId);\n    }\n  }\n\n  removeOutput(outputId) {\n    delete this.outputById[outputId];\n    this.outputs.splice(this.outputs.indexOf(outputId), 1);\n\n    for (const source of this.allSources(outputId)) {\n      this.connections.delete(`${source}-${outputId}`);\n    }\n  }\n\n  removeGate(gateId) {\n    const gate = this.gates[gateId];\n    for (const input of Object.values(gate.inputById)) {\n      this.allSources(input.id).forEach((source) => {\n        this.connections.delete(`${source}-${input.id}`);\n      });\n    }\n    for (const output of Object.values(gate.outputById)) {\n      this.allDestinations(output.id).forEach((destination) => {\n        this.connections.delete(`${output.id}-${destination}`);\n        this.updateNode(destination);\n      });\n    }\n    delete this.gates[gateId];\n  }\n\n  allDestinations(source) {\n    const destinations = [];\n    for (const connection of this.connections.values()) {\n      const [_source, _destination] = connection.split(\"-\");\n      if (_source === source) {\n        destinations.push(_destination);\n      }\n    }\n    return destinations;\n  }\n\n  allSources(destination) {\n    const sources = [];\n    for (const connection of this.connections.values()) {\n      const [_source, _destination] = connection.split(\"-\");\n      if (_destination === destination) {\n        sources.push(_source);\n      }\n    }\n    return sources;\n  }\n\n  getSourceValue(nodeId) {\n    const [gateId] = nodeId.split(\":\");\n    if (this.gates[gateId]) {\n      return this.gates[gateId].outputById[nodeId].value;\n    } else if (this.inputById[nodeId]) {\n      return this.inputById[nodeId].value;\n    } else {\n      console.log(\"wtf???\", nodeId);\n      return 0;\n    }\n  }\n\n  updateNode(nodeId) {\n    const [gateId] = nodeId.split(\":\");\n    if (this.gates[gateId]) {\n      this.updateGate(gateId);\n    } else if (this.outputById[nodeId]) {\n      this.updateOutput(nodeId);\n    } else {\n      console.log(\"wtf???\", nodeId);\n    }\n  }\n\n  updateGate(gateId) {\n    const gate = this.gates[gateId];\n\n    for (const inputId of gate.inputs) {\n      const input = gate.inputById[inputId];\n      input.state = 0;\n      for (const source of this.allSources(input.id)) {\n        const value = this.getSourceValue(source);\n        if (value === 1) {\n          input.state = 1;\n          break;\n        }\n      }\n    }\n\n    gate.evaluate();\n\n    for (const outputId of gate.outputs) {\n      const output = gate.outputById[outputId];\n      for (const destination of this.allDestinations(output.id)) {\n        this.updateNode(destination);\n      }\n    }\n  }\n\n  updateOutput(outputId) {\n    const output = this.outputById[outputId];\n    output.state = 0;\n    for (const source of this.allSources(outputId)) {\n      const value = this.getSourceValue(source);\n      if (value === 1) {\n        output.state = 1;\n        break;\n      }\n    }\n  }\n\n  transformToGate(name) {\n    const inputsCount = this.inputs.length;\n    const outputsCount = this.outputs.length;\n\n    const gates = [];\n    for (const gate of Object.values(this.gates)) {\n      gates.push({\n        constructorClass: gate.constructor,\n        constructorName: gate.constructor.staticName,\n        oldId: gate.id,\n      });\n    }\n\n    const connections = [];\n    for (const connection of this.connections) {\n      const [source, destination] = connection.split(\"-\");\n\n      const conn = {};\n\n      const [sourceGate, sourceId] = source.split(\":\");\n      const [destinationGate, destinationId] = destination.split(\":\");\n\n      if (this.inputById[source]) {\n        conn.source = {\n          type: \"self-input\",\n          nodeId: sourceId,\n          oldIndex: this.inputs.indexOf(source),\n        };\n      } else if (this.gates[sourceGate]) {\n        conn.source = {\n          type: \"gate-output\",\n          nodeId: sourceId,\n          gateId: sourceGate,\n        };\n      }\n\n      if (this.outputById[destination]) {\n        conn.destination = {\n          type: \"self-output\",\n          nodeId: sourceId,\n          oldIndex: this.outputs.indexOf(destination),\n        };\n      } else if (this.gates[destinationGate]) {\n        conn.destination = {\n          type: \"gate-input\",\n          nodeId: destinationId,\n          gateId: destinationGate,\n        };\n      }\n\n      connections.push(conn);\n    }\n\n    const newCircuitClass = createCircuit(\n      name,\n      inputsCount,\n      outputsCount,\n      gates,\n      connections\n    );\n\n    return newCircuitClass;\n  }\n\n  toJS() {\n    const data = {\n      inputs: this.inputs,\n      inputById: this.inputById,\n      outputs: this.outputs,\n      outputById: this.outputById,\n      gates: this.gates,\n      connections: Array.from(this.connections),\n      _inputId: this._inputId,\n      _outputId: this._outputId,\n      position: this.position,\n    };\n    return data;\n  }\n\n  fromJS(data) {\n    this.inputs = data.inputs;\n    this.inputById = Object.values(data.inputById).reduce(\n      (inputs, inputConfig) => {\n        inputs[inputConfig.id] = Input.fromJS(inputConfig);\n        return inputs;\n      },\n      {}\n    );\n    this.outputs = data.outputs;\n    this.outputById = Object.values(data.outputById).reduce(\n      (outputs, outputConfig) => {\n        outputs[outputConfig.id] = Output.fromJS(outputConfig);\n        return outputs;\n      },\n      {}\n    );\n\n    this.connections = new Set(data.connections);\n\n    this._inputId = data._inputId;\n    this._outputId = data._outputId;\n    this.position = data.position;\n\n    this.gates = Object.values(data.gates).reduce((gates, gateConfig) => {\n      const gateClass = availableGates\n        .concat(customGates)\n        .find(\n          (gateConstructor) =>\n            gateConstructor.classPointer.staticName === gateConfig.name\n        );\n      if (gateClass) {\n        const gate = new gateClass.classPointer(\n          gateConfig.position.x,\n          gateConfig.position.y\n        );\n\n        gates[gate.id] = gate;\n      }\n      return gates;\n    }, {});\n\n    Object.values(this.gates).forEach((gate) => {\n      this.updateGate(gate.id);\n    });\n  }\n}\n\nlet globalCircuitId = 0;\nconst createCircuit = (name, inputs, outputs, gates, connections, evalFn) => {\n  const args = JSON.stringify({\n    name,\n    inputs,\n    outputs,\n    gates,\n    connections,\n  });\n  const result = class DynamicGate extends CircuitBase {\n    static initialArgs = args;\n    static color = GATE_COLORS[globalCircuitId++ % GATE_COLORS.length];\n    name = name;\n\n    constructor(x = 0, y = 0) {\n      super(inputs, outputs, gates, connections, evalFn);\n\n      this.position.x = x;\n      this.position.y = y;\n    }\n  };\n  result.staticName = name;\n  return result;\n};\n\nconst InputNode = ({ input, connections, ...rest }) => {\n  return (\n    <div\n      id={input.id}\n      {...rest}\n      className={`circuit-input ${input.value === 1 ? \"circuit-input-on\" : \"\"}`}\n      style={{\n        left: input.position.x,\n        top: input.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst OutputNode = ({ output, connections, ...rest }) => {\n  return (\n    <div\n      id={output.id}\n      {...rest}\n      className={`circuit-output ${\n        output.value === 1 ? \"circuit-output-on\" : \"\"\n      }`}\n      style={{\n        right: output.position.x,\n        top: output.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst GateNode = ({ gate, connections, onConnectionMade, onRemove }) => {\n  return (\n    <div\n      id={gate.id}\n      className={`circuit-gate circuit-gate-${gate.type}`}\n      style={{\n        left: gate.position.x,\n        top: gate.position.y,\n        background: `#${gate.constructor.color}`,\n      }}\n      onClick={(e) => {\n        if (e.shiftKey) {\n          circuit.removeGate(gate.id);\n          onRemove();\n          e.stopPropagation();\n        }\n      }}\n      onMouseDown={(e) => {\n        if (currentlyMovingGate) {\n          return;\n        }\n\n        currentlyMovingGate = {\n          gateId: gate.id,\n          startMousePos: {\n            x: e.clientX,\n            y: e.clientY,\n          },\n          startGatePos: {\n            x: gate.position.x,\n            y: gate.position.y,\n          },\n        };\n      }}\n    >\n      <div className=\"circuit-gate-inputs\">\n        {Object.values(gate.inputById).map((input) => (\n          <div\n            key={input.id}\n            id={input.id}\n            className={`circuit-gate-input ${\n              input.value === 1 ? \"circuit-gate-input-on\" : \"\"\n            }`}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnectionMade(connectionStart, input.id);\n              }\n\n              connectionStart = null;\n            }}\n          ></div>\n        ))}\n      </div>\n      <div className=\"circuit-gate-name\">{gate.name}</div>\n      <div className=\"circuit-gate-outputs\">\n        {Object.values(gate.outputById).map((output) => (\n          <div\n            key={output.id}\n            id={output.id}\n            className={`circuit-gate-output ${\n              output.value === 1 ? \"circuit-gate-output-on\" : \"\"\n            }`}\n            onMouseDown={(e) => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = output.id;\n              e.stopPropagation();\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Connection = ({ start, end, complete = false }) => {\n  let x1, y1, x2, y2;\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => {\n    updateState({});\n  }, []);\n\n  React.useEffect(() => {\n    setImmediate(forceUpdate);\n  }, []);\n\n  const startNode = document.getElementById(start);\n  const endNode = document.getElementById(end);\n\n  if (complete) {\n    if (!startNode || !endNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n    const endPos = endNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = endPos.x + endPos.width / 2;\n    y2 = endPos.y + endPos.height / 2;\n  } else {\n    if (!startNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = mousePos.x;\n    y2 = mousePos.y;\n  }\n\n  return <line x1={x1} y1={y1} x2={x2} y2={y2} />;\n};\n\nconst saveAppState = () => {\n  try {\n    const data = JSON.stringify({\n      circuit: circuit.toJS(),\n      customGates: customGates.map((gate) => {\n        return gate.classPointer.initialArgs;\n      }),\n    });\n    localStorage.setItem(LOCALSTORAGE_KEY, data);\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nfunction App() {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => {\n    // saveAppStateDebounced();\n    updateState({});\n  }, []);\n\n  const onConnection = (a, b) => {\n    circuit.addConnection(a, b);\n\n    forceUpdate();\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"circuit\"\n        onMouseUp={() => {\n          connectionStart = null;\n          currentlyMovingGate = null;\n\n          forceUpdate();\n        }}\n        onMouseMove={(e) => {\n          if (connectionStart) {\n            mousePos.x = e.clientX;\n            mousePos.y = e.clientY;\n            forceUpdate();\n          }\n\n          if (currentlyMovingGate) {\n            const xDiff = e.clientX - currentlyMovingGate.startMousePos.x;\n            const yDiff = e.clientY - currentlyMovingGate.startMousePos.y;\n\n            const x = currentlyMovingGate.startGatePos.x + xDiff;\n            const y = currentlyMovingGate.startGatePos.y + yDiff;\n\n            circuit.gates[currentlyMovingGate.gateId].position.x = x;\n            circuit.gates[currentlyMovingGate.gateId].position.y = y;\n\n            forceUpdate();\n          }\n        }}\n      >\n        <div\n          className=\"circuit-inputs\"\n          onClick={(e) => {\n            circuit.addInput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        <div\n          className=\"circuit-outputs\"\n          onClick={(e) => {\n            circuit.addOutput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        {Object.values(circuit.inputById).map((input) => (\n          <InputNode\n            key={input.id}\n            input={input}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.shiftKey) {\n                circuit.removeInput(input.id);\n              } else {\n                input.toggle();\n                circuit\n                  .allDestinations(input.id)\n                  .forEach((destination) => circuit.updateNode(destination));\n              }\n\n              forceUpdate();\n            }}\n            onMouseDown={() => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = input.id;\n            }}\n          />\n        ))}\n        {Object.values(circuit.outputById).map((output) => (\n          <OutputNode\n            key={output.id}\n            output={output}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.shiftKey) {\n                circuit.removeOutput(output.id);\n              }\n              forceUpdate();\n            }}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnection(connectionStart, output.id);\n              }\n\n              connectionStart = null;\n            }}\n          />\n        ))}\n        {Object.values(circuit.gates).map((gate) => (\n          <GateNode\n            key={gate.id}\n            gate={gate}\n            connections={circuit.connections}\n            onConnectionMade={onConnection}\n            onRemove={() => forceUpdate()}\n          />\n        ))}\n        <svg>\n          {Array.from(circuit.connections).map((connection) => {\n            const [start, end] = connection.split(\"-\");\n            return (\n              <Connection key={connection} complete start={start} end={end} />\n            );\n          })}\n          {connectionStart && (\n            <>\n              <Connection start={connectionStart} />\n            </>\n          )}\n        </svg>\n      </div>\n      <div className=\"tools\">\n        <div className=\"tools-save\">\n          <input\n            id=\"gate-name\"\n            className=\"tools-save-name\"\n            placeholder=\"New gate name\"\n          />\n          <button\n            className=\"tools-save-submit\"\n            onClick={(e) => {\n              const nameInput = document.getElementById(\"gate-name\");\n\n              if (nameInput.value.length) {\n                const gateClass = circuit.transformToGate(nameInput.value);\n\n                customGates.push({\n                  name: nameInput.value,\n                  classPointer: gateClass,\n                  id: availableGateId++,\n                });\n\n                nameInput.value = \"\";\n                circuit = new EmptyCurcuit();\n\n                forceUpdate();\n              }\n            }}\n          >\n            Create\n          </button>\n        </div>\n        <div className=\"tools-gates\">\n          {availableGates.map((gate) => (\n            <button\n              className=\"tools-gate\"\n              key={gate.name}\n              style={{ background: `#${gate.classPointer.color}` }}\n              onClick={(e) => {\n                circuit.addGate(gate.classPointer, 50, 20);\n                forceUpdate();\n              }}\n            >\n              {gate.name}\n            </button>\n          ))}\n          {customGates.map((gate) => (\n            <button\n              className=\"tools-gate\"\n              key={gate.name}\n              style={{ background: `#${gate.classPointer.color}` }}\n              onClick={(e) => {\n                circuit.addGate(gate.classPointer, 50, 20);\n                forceUpdate();\n              }}\n            >\n              {gate.name}\n            </button>\n          ))}\n        </div>\n      </div>\n      <div className=\"state-manager\">\n        <br />\n        <button\n          onClick={() => {\n            circuit = new EmptyCurcuit();\n            forceUpdate();\n          }}\n        >\n          Reset Current Curcuit\n        </button>\n        <button\n          onClick={() => {\n            localStorage.removeItem(LOCALSTORAGE_KEY);\n            window.location.reload();\n          }}\n        >\n          Reset Whole State\n        </button>\n        <br />\n        (buggy atm):\n        <button\n          onClick={() => {\n            saveAppState();\n          }}\n        >\n          Save State\n        </button>\n        <button\n          onClick={() => {\n            loadAppState();\n            forceUpdate();\n          }}\n        >\n          Load State\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst loadAppState = () => {\n  try {\n    const json = localStorage.getItem(LOCALSTORAGE_KEY);\n    if (json) {\n      const data = JSON.parse(json);\n      const gates = data.customGates.map((v) => JSON.parse(v));\n      for (const args of gates) {\n        const gateClass = createCircuit(\n          args.name,\n          args.inputs,\n          args.outputs,\n          args.gates.map((g) => {\n            const constructorClass = availableGates\n              .concat(customGates)\n              .find(\n                (gateConstructor) =>\n                  gateConstructor.classPointer.staticName === g.constructorName\n              );\n            if (constructorClass) {\n              g.constructorClass = constructorClass.classPointer;\n            }\n            return g;\n          }),\n          args.connections\n        );\n        customGates.push({\n          name: args.name,\n          classPointer: gateClass,\n          id: availableGateId++,\n        });\n      }\n\n      circuit.fromJS(data.circuit);\n    }\n  } catch (e) {\n    console.log(e);\n    // localStorage.removeItem(LOCALSTORAGE_KEY);\n  }\n};\n\nconst saveAppStateDebounced = debounce(saveAppState, 300);\n\nconst EmptyCurcuit = createCircuit(\"BASE\", 0, 0, [], []);\n\nlet circuit = new EmptyCurcuit();\n\nconst AND_Gate = createCircuit(\"AND\", 2, 1, [], [], function (gate) {\n  const i1 = gate.inputById[gate.inputs[0]];\n  const i2 = gate.inputById[gate.inputs[1]];\n  const o1 = gate.outputById[gate.outputs[0]];\n\n  if (i1.value === 1 && i2.value === 1) {\n    o1.state = 1;\n  } else {\n    o1.state = 0;\n  }\n});\n\nconst NOT_Gate = createCircuit(\"NOT\", 1, 1, [], [], function (gate) {\n  const i1 = gate.inputById[gate.inputs[0]];\n  const o1 = gate.outputById[gate.outputs[0]];\n\n  if (i1.value === 1) {\n    o1.state = 0;\n  } else {\n    o1.state = 1;\n  }\n});\n\nlet connectionStart = null;\nlet currentlyMovingGate = null;\nlet mousePos = { x: 0, y: 0 };\nlet availableGateId = 1;\nconst availableGates = [\n  { classPointer: AND_Gate, name: \"AND\", id: availableGateId++ },\n  { classPointer: NOT_Gate, name: \"NOT\", id: availableGateId++ },\n];\nconst customGates = [];\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}