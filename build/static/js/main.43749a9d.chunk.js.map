{"version":3,"sources":["App.js","index.js"],"names":["LOCALSTORAGE_KEY","GATE_COLORS","Input","id","x","y","position","state","undefined","this","config","input","Output","output","_globalGateId","CircuitBase","inputs","outputs","gates","connections","evaluationFn","inputById","outputById","Set","_inputId","_outputId","color","length","inputIndex","push","outputIndex","gateByOldId","gate","g","constructorClass","oldId","connection","source","destination","type","oldIndex","gateId","nodeId","console","log","add","evaluate","Object","values","allDestinations","forEach","updateNode","outputId","value","gateClass","inputId","splice","indexOf","updateList","split","delete","allSources","destinations","_source","_destination","sources","updateGate","updateOutput","iId","getSourceValue","prevState","getOutputsState","name","inputsCount","outputsCount","constructor","constructorName","staticName","conn","sourceGate","sourceId","destinationGate","destinationId","createCircuit","Array","from","data","reduce","inputConfig","fromJS","outputConfig","gateConfig","availableGates","concat","customGates","find","gateConstructor","classPointer","globalCircuitId","evalFn","args","JSON","stringify","result","initialArgs","InputNode","rest","className","style","left","top","OutputNode","right","GateNode","onConnectionMade","onRemove","background","onClick","e","shiftKey","circuit","removeGate","stopPropagation","onTouchStart","onMouseDown","currentlyMovingGate","startMousePos","clientX","clientY","startGatePos","onTouchMove","map","connectionStart","onMouseUp","onTouchEnd","mousePos","Connection","x1","y1","x2","y2","start","end","complete","isActive","getNodeValue","React","useState","updateState","forceUpdate","useCallback","useEffect","timer","setImmediate","clearImmediate","startNode","document","getElementById","endNode","startPos","getBoundingClientRect","endPos","width","height","cx1","cy1","cx2","cy2","curlyFries","fill","d","hx1","hy1","hx2","cx3","cy3","cx4","cy4","tooClose","halfY","Math","abs","midY","midX","saveAppState","toJS","localStorage","setItem","loadAppState","json","getItem","parse","v","availableGateId","EmptyCurcuit","fn","time","debounce","AND_Gate","i1","i2","o1","NOT_Gate","currentlyDraggingGate","App","onConnection","a","b","addConnection","onDragOver","preventDefault","onDrop","addGate","onMouseMove","shouldUpdate","xDiff","yDiff","addInput","removeInput","ctrlKey","toggle","addOutput","removeOutput","placeholder","nameInput","transformToGate","draggable","onDragStart","removeItem","window","location","reload","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.43749a9d.chunk.js","sourcesContent":["import \"./App.css\";\r\n\r\nimport React from \"react\";\r\n\r\nconst LOCALSTORAGE_KEY = \"circuit-data\";\r\nconst GATE_COLORS = [\r\n  \"e07800\",\r\n  \"0969d7\",\r\n  \"b80000\",\r\n  \"65a300\",\r\n  \"c31fff\",\r\n  \"9fb800\",\r\n  \"00e083\",\r\n];\r\n\r\nconst debounce = (fn, time) => {\r\n  let timer;\r\n  return () => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(fn, time);\r\n  };\r\n};\r\n\r\nclass Input {\r\n  position = { x: 0, y: 0 };\r\n\r\n  state = undefined;\r\n\r\n  constructor(id, x, y) {\r\n    this.id = id;\r\n    this.position.x = x;\r\n    this.position.y = y;\r\n  }\r\n\r\n  get value() {\r\n    return this.state;\r\n  }\r\n\r\n  toggle() {\r\n    if (!this.state) {\r\n      this.state = 1;\r\n    } else {\r\n      this.state = 0;\r\n    }\r\n  }\r\n\r\n  static fromJS(config) {\r\n    const input = new Input();\r\n    input.id = config.id;\r\n    input.position = config.position;\r\n    input.state = config.state;\r\n    return input;\r\n  }\r\n}\r\n\r\nclass Output {\r\n  position = { x: 0, y: 0 };\r\n\r\n  state = undefined;\r\n\r\n  constructor(id, x, y) {\r\n    this.id = id;\r\n    this.position.x = x;\r\n    this.position.y = y;\r\n  }\r\n\r\n  get value() {\r\n    return this.state;\r\n  }\r\n\r\n  static fromJS(config) {\r\n    const output = new Output();\r\n    output.id = config.id;\r\n    output.position = config.position;\r\n    output.state = config.state;\r\n    return output;\r\n  }\r\n}\r\n\r\nlet _globalGateId = 1;\r\n\r\nclass CircuitBase {\r\n  inputs = [];\r\n  inputById = {};\r\n\r\n  outputs = [];\r\n  outputById = {};\r\n\r\n  gates = {};\r\n  connections = new Set();\r\n\r\n  _inputId = 0;\r\n  _outputId = 0;\r\n\r\n  position = { x: 0, y: 0 };\r\n\r\n  constructor(inputs, outputs, gates, connections, evaluationFn) {\r\n    this.id = _globalGateId++;\r\n    this.color = GATE_COLORS[this.id % GATE_COLORS.length];\r\n\r\n    for (let inputIndex = 0; inputIndex < inputs; ++inputIndex) {\r\n      const input = new Input(`${this.id}:i${this._inputId++}`, 0, 0);\r\n      this.inputById[input.id] = input;\r\n      this.inputs.push(input.id);\r\n    }\r\n\r\n    for (let outputIndex = 0; outputIndex < outputs; ++outputIndex) {\r\n      const output = new Output(`${this.id}:o${this._outputId++}`, 0, 0);\r\n      this.outputById[output.id] = output;\r\n      this.outputs.push(output.id);\r\n    }\r\n\r\n    const gateByOldId = {};\r\n    for (const gate of gates) {\r\n      const g = new gate.constructorClass();\r\n      this.gates[g.id] = g;\r\n      gateByOldId[gate.oldId] = g;\r\n    }\r\n\r\n    for (const connection of connections) {\r\n      let source,\r\n        destination = \"\";\r\n\r\n      if (connection.source.type === \"self-input\") {\r\n        source = `${this.id}:i${connection.source.oldIndex}`;\r\n      } else if (connection.source.type === \"gate-output\") {\r\n        source = `${gateByOldId[connection.source.gateId].id}:${\r\n          connection.source.nodeId\r\n        }`;\r\n      } else {\r\n        console.log(\"wtf???\");\r\n      }\r\n\r\n      if (connection.destination.type === \"self-output\") {\r\n        destination = `${this.id}:o${connection.destination.oldIndex}`;\r\n      } else if (connection.destination.type === \"gate-input\") {\r\n        destination = `${gateByOldId[connection.destination.gateId].id}:${\r\n          connection.destination.nodeId\r\n        }`;\r\n      } else {\r\n        console.log(\"wtf???\");\r\n      }\r\n\r\n      this.connections.add(`${source}-${destination}`);\r\n    }\r\n\r\n    if (evaluationFn) {\r\n      this.evaluate = () => evaluationFn(this);\r\n    }\r\n  }\r\n\r\n  evaluate() {\r\n    // console.log(\"evaluate\");\r\n    for (const input of Object.values(this.inputById)) {\r\n      // console.log(\"  evaluate\", input.id);\r\n      this.allDestinations(input.id).forEach((nodeId) =>\r\n        this.updateNode(nodeId)\r\n      );\r\n    }\r\n  }\r\n\r\n  getOutputsState() {\r\n    const state = {};\r\n    for (const outputId of this.outputs) {\r\n      state[outputId] = this.outputById[outputId].value;\r\n    }\r\n    return state;\r\n  }\r\n\r\n  addInput(y) {\r\n    const input = new Input(`${this.id}:i${this._inputId++}`, 0, y);\r\n\r\n    this.inputById[input.id] = input;\r\n    this.inputs.push(input.id);\r\n  }\r\n\r\n  addOutput(y) {\r\n    const output = new Output(`${this.id}:o${this._outputId++}`, 0, y);\r\n\r\n    this.outputById[output.id] = output;\r\n    this.outputs.push(output.id);\r\n  }\r\n\r\n  addGate(gateClass, x, y) {\r\n    const gate = new gateClass(x, y);\r\n\r\n    gate.evaluate();\r\n\r\n    this.gates[gate.id] = gate;\r\n  }\r\n\r\n  addConnection(source, destination) {\r\n    this.connections.add(`${source}-${destination}`);\r\n\r\n    this.updateNode(destination);\r\n  }\r\n\r\n  removeInput(inputId) {\r\n    delete this.inputById[inputId];\r\n    this.inputs.splice(this.inputs.indexOf(inputId), 1);\r\n\r\n    const updateList = new Set();\r\n\r\n    for (const connection of this.connections) {\r\n      const [source, destination] = connection.split(\"-\");\r\n      if (source === inputId) {\r\n        this.connections.delete(connection);\r\n        updateList.add(destination);\r\n      }\r\n    }\r\n\r\n    for (const nodeId of updateList) {\r\n      this.updateNode(nodeId);\r\n    }\r\n  }\r\n\r\n  removeOutput(outputId) {\r\n    delete this.outputById[outputId];\r\n    this.outputs.splice(this.outputs.indexOf(outputId), 1);\r\n\r\n    for (const source of this.allSources(outputId)) {\r\n      this.connections.delete(`${source}-${outputId}`);\r\n    }\r\n  }\r\n\r\n  removeGate(gateId) {\r\n    const gate = this.gates[gateId];\r\n    for (const input of Object.values(gate.inputById)) {\r\n      this.allSources(input.id).forEach((source) => {\r\n        this.connections.delete(`${source}-${input.id}`);\r\n      });\r\n    }\r\n    for (const output of Object.values(gate.outputById)) {\r\n      this.allDestinations(output.id).forEach((destination) => {\r\n        this.connections.delete(`${output.id}-${destination}`);\r\n        this.updateNode(destination);\r\n      });\r\n    }\r\n    delete this.gates[gateId];\r\n  }\r\n\r\n  allDestinations(source) {\r\n    const destinations = [];\r\n    for (const connection of this.connections.values()) {\r\n      const [_source, _destination] = connection.split(\"-\");\r\n      if (_source === source) {\r\n        destinations.push(_destination);\r\n      }\r\n    }\r\n    return destinations;\r\n  }\r\n\r\n  allSources(destination) {\r\n    const sources = [];\r\n    for (const connection of this.connections.values()) {\r\n      const [_source, _destination] = connection.split(\"-\");\r\n      if (_destination === destination) {\r\n        sources.push(_source);\r\n      }\r\n    }\r\n    return sources;\r\n  }\r\n\r\n  getSourceValue(nodeId) {\r\n    const [gateId] = nodeId.split(\":\");\r\n    if (this.gates[gateId]) {\r\n      return this.gates[gateId].outputById[nodeId].value;\r\n    } else if (this.inputById[nodeId]) {\r\n      return this.inputById[nodeId].value;\r\n    } else {\r\n      console.log(\"wtf???\", nodeId);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  updateNode(nodeId) {\r\n    const [gateId] = nodeId.split(\":\");\r\n    if (this.gates[gateId]) {\r\n      this.updateGate(gateId, nodeId);\r\n    } else if (this.outputById[nodeId]) {\r\n      this.updateOutput(nodeId);\r\n    } else {\r\n      console.log(\"wtf???\", nodeId);\r\n    }\r\n  }\r\n\r\n  updateGate(gateId, nodeId) {\r\n    const gate = this.gates[gateId];\r\n\r\n    for (const iId of gate.inputs) {\r\n      if (iId !== nodeId) {\r\n        continue;\r\n      }\r\n      const input = gate.inputById[iId];\r\n      input.state = 0;\r\n      // update only if we potentially change from 0->1 or 1->0\r\n      for (const source of this.allSources(input.id)) {\r\n        const value = this.getSourceValue(source);\r\n        if (value === 1) {\r\n          input.state = 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    const prevState = gate.getOutputsState();\r\n    gate.evaluate();\r\n    const newState = gate.getOutputsState();\r\n\r\n    // console.log(prevState, newState);\r\n\r\n    for (const outputId of gate.outputs) {\r\n      const output = gate.outputById[outputId];\r\n      if (prevState[outputId] === output.value) {\r\n        continue;\r\n      }\r\n      for (const destination of this.allDestinations(output.id)) {\r\n        this.updateNode(destination);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateOutput(outputId) {\r\n    const output = this.outputById[outputId];\r\n    output.state = 0;\r\n    for (const source of this.allSources(outputId)) {\r\n      const value = this.getSourceValue(source);\r\n      if (value === 1) {\r\n        output.state = 1;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  transformToGate(name) {\r\n    const inputsCount = this.inputs.length;\r\n    const outputsCount = this.outputs.length;\r\n\r\n    const gates = [];\r\n    for (const gate of Object.values(this.gates)) {\r\n      gates.push({\r\n        constructorClass: gate.constructor,\r\n        constructorName: gate.constructor.staticName,\r\n        oldId: gate.id,\r\n      });\r\n    }\r\n\r\n    const connections = [];\r\n    for (const connection of this.connections) {\r\n      const [source, destination] = connection.split(\"-\");\r\n\r\n      const conn = {};\r\n\r\n      const [sourceGate, sourceId] = source.split(\":\");\r\n      const [destinationGate, destinationId] = destination.split(\":\");\r\n\r\n      if (this.inputById[source]) {\r\n        conn.source = {\r\n          type: \"self-input\",\r\n          nodeId: sourceId,\r\n          oldIndex: this.inputs.indexOf(source),\r\n        };\r\n      } else if (this.gates[sourceGate]) {\r\n        conn.source = {\r\n          type: \"gate-output\",\r\n          nodeId: sourceId,\r\n          gateId: sourceGate,\r\n        };\r\n      }\r\n\r\n      if (this.outputById[destination]) {\r\n        conn.destination = {\r\n          type: \"self-output\",\r\n          nodeId: sourceId,\r\n          oldIndex: this.outputs.indexOf(destination),\r\n        };\r\n      } else if (this.gates[destinationGate]) {\r\n        conn.destination = {\r\n          type: \"gate-input\",\r\n          nodeId: destinationId,\r\n          gateId: destinationGate,\r\n        };\r\n      }\r\n\r\n      connections.push(conn);\r\n    }\r\n\r\n    const newCircuitClass = createCircuit(\r\n      name,\r\n      inputsCount,\r\n      outputsCount,\r\n      gates,\r\n      connections\r\n    );\r\n\r\n    return newCircuitClass;\r\n  }\r\n\r\n  toJS() {\r\n    const data = {\r\n      inputs: this.inputs,\r\n      inputById: this.inputById,\r\n      outputs: this.outputs,\r\n      outputById: this.outputById,\r\n      gates: this.gates,\r\n      connections: Array.from(this.connections),\r\n      _inputId: this._inputId,\r\n      _outputId: this._outputId,\r\n      position: this.position,\r\n    };\r\n    return data;\r\n  }\r\n\r\n  fromJS(data) {\r\n    this.inputs = data.inputs;\r\n    this.inputById = Object.values(data.inputById).reduce(\r\n      (inputs, inputConfig) => {\r\n        inputs[inputConfig.id] = Input.fromJS(inputConfig);\r\n        return inputs;\r\n      },\r\n      {}\r\n    );\r\n    this.outputs = data.outputs;\r\n    this.outputById = Object.values(data.outputById).reduce(\r\n      (outputs, outputConfig) => {\r\n        outputs[outputConfig.id] = Output.fromJS(outputConfig);\r\n        return outputs;\r\n      },\r\n      {}\r\n    );\r\n\r\n    this.connections = new Set(data.connections);\r\n\r\n    this._inputId = data._inputId;\r\n    this._outputId = data._outputId;\r\n    this.position = data.position;\r\n\r\n    this.gates = Object.values(data.gates).reduce((gates, gateConfig) => {\r\n      const gateClass = availableGates\r\n        .concat(customGates)\r\n        .find(\r\n          (gateConstructor) =>\r\n            gateConstructor.classPointer.staticName === gateConfig.name\r\n        );\r\n      if (gateClass) {\r\n        const gate = new gateClass.classPointer(\r\n          gateConfig.position.x,\r\n          gateConfig.position.y\r\n        );\r\n\r\n        gates[gate.id] = gate;\r\n      }\r\n      return gates;\r\n    }, {});\r\n\r\n    Object.values(this.gates).forEach((gate) => {\r\n      this.updateGate(gate.id);\r\n    });\r\n  }\r\n\r\n  getNodeValue(nodeId) {\r\n    if (this.inputById[nodeId]) {\r\n      return this.inputById[nodeId].value;\r\n    }\r\n\r\n    for (const gate of Object.values(this.gates)) {\r\n      if (gate.outputById[nodeId]) {\r\n        return gate.outputById[nodeId].value;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n}\r\n\r\nlet globalCircuitId = 0;\r\nconst createCircuit = (name, inputs, outputs, gates, connections, evalFn) => {\r\n  const args = JSON.stringify({\r\n    name,\r\n    inputs,\r\n    outputs,\r\n    gates,\r\n    connections,\r\n  });\r\n  const result = class DynamicGate extends CircuitBase {\r\n    static initialArgs = args;\r\n    static color = GATE_COLORS[globalCircuitId++ % GATE_COLORS.length];\r\n    name = name;\r\n\r\n    constructor(x = 0, y = 0) {\r\n      super(inputs, outputs, gates, connections, evalFn);\r\n\r\n      this.position.x = x;\r\n      this.position.y = y;\r\n    }\r\n  };\r\n  result.staticName = name;\r\n  return result;\r\n};\r\n\r\nconst InputNode = ({ input, connections, ...rest }) => {\r\n  return (\r\n    <div\r\n      id={input.id}\r\n      {...rest}\r\n      className={`circuit-input ${input.value === 1 ? \"circuit-input-on\" : \"\"}`}\r\n      style={{\r\n        left: input.position.x,\r\n        top: input.position.y,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nconst OutputNode = ({ output, connections, ...rest }) => {\r\n  return (\r\n    <div\r\n      id={output.id}\r\n      {...rest}\r\n      className={`circuit-output ${\r\n        output.value === 1 ? \"circuit-output-on\" : \"\"\r\n      }`}\r\n      style={{\r\n        right: output.position.x,\r\n        top: output.position.y,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nconst GateNode = ({ gate, connections, onConnectionMade, onRemove }) => {\r\n  return (\r\n    <div\r\n      id={gate.id}\r\n      className={`circuit-gate circuit-gate-${gate.type}`}\r\n      style={{\r\n        left: gate.position.x,\r\n        top: gate.position.y,\r\n        background: `#${gate.constructor.color}`,\r\n      }}\r\n      onClick={(e) => {\r\n        if (e.shiftKey) {\r\n          circuit.removeGate(gate.id);\r\n          onRemove();\r\n          e.stopPropagation();\r\n        }\r\n      }}\r\n      onTouchStart={(e) => {\r\n        // if (e.shiftKey) {\r\n        //   circuit.removeGate(gate.id);\r\n        //   onRemove();\r\n        //   e.stopPropagation();\r\n        // }\r\n      }}\r\n      onMouseDown={(e) => {\r\n        if (currentlyMovingGate) {\r\n          return;\r\n        }\r\n\r\n        currentlyMovingGate = {\r\n          gateId: gate.id,\r\n          startMousePos: {\r\n            x: e.clientX,\r\n            y: e.clientY,\r\n          },\r\n          startGatePos: {\r\n            x: gate.position.x,\r\n            y: gate.position.y,\r\n          },\r\n        };\r\n      }}\r\n      onTouchMove={(e) => {\r\n        // if (currentlyMovingGate) {\r\n        //   return;\r\n        // }\r\n        // currentlyMovingGate = {\r\n        //   gateId: gate.id,\r\n        //   startMousePos: {\r\n        //     x: e.touches[0].clientX,\r\n        //     y: e.touches[0].clientY,\r\n        //   },\r\n        //   startGatePos: {\r\n        //     x: gate.position.x,\r\n        //     y: gate.position.y,\r\n        //   },\r\n        // };\r\n      }}\r\n    >\r\n      <div className=\"circuit-gate-inputs\">\r\n        {Object.values(gate.inputById).map((input) => (\r\n          <div\r\n            key={input.id}\r\n            id={input.id}\r\n            className={`circuit-gate-input ${\r\n              input.value === 1 ? \"circuit-gate-input-on\" : \"\"\r\n            }`}\r\n            onMouseDown={(e) => {\r\n              if (connectionStart) {\r\n                e.stopPropagation();\r\n                onConnectionMade(connectionStart, input.id);\r\n              }\r\n            }}\r\n            onMouseUp={(e) => {\r\n              if (connectionStart) {\r\n                e.stopPropagation();\r\n                onConnectionMade(connectionStart, input.id);\r\n                connectionStart = null;\r\n              }\r\n            }}\r\n            onTouchEnd={() => {\r\n              // if (connectionStart) {\r\n              //   onConnectionMade(connectionStart, input.id);\r\n              // }\r\n              // connectionStart = null;\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <div className=\"circuit-gate-name\">{gate.name}</div>\r\n      <div className=\"circuit-gate-outputs\">\r\n        {Object.values(gate.outputById).map((output) => (\r\n          <div\r\n            key={output.id}\r\n            id={output.id}\r\n            className={`circuit-gate-output ${\r\n              output.value === 1 ? \"circuit-gate-output-on\" : \"\"\r\n            }`}\r\n            onMouseDown={(e) => {\r\n              if (connectionStart) {\r\n                return;\r\n              }\r\n\r\n              connectionStart = output.id;\r\n              mousePos.x = e.clientX;\r\n              mousePos.y = e.clientY;\r\n\r\n              e.stopPropagation();\r\n            }}\r\n            onTouchStart={(e) => {\r\n              // if (connectionStart) {\r\n              //   return;\r\n              // }\r\n              // connectionStart = output.id;\r\n              // e.stopPropagation();\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Connection = ({ start, end, complete = false }) => {\r\n  let x1, y1, x2, y2;\r\n\r\n  const isActive = circuit.getNodeValue(start) === 1;\r\n\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => {\r\n    updateState({});\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    const timer = setImmediate(forceUpdate);\r\n\r\n    return () => clearImmediate(timer);\r\n  }, []);\r\n\r\n  const startNode = document.getElementById(start);\r\n  const endNode = document.getElementById(end);\r\n\r\n  if (complete) {\r\n    if (!startNode || !endNode) {\r\n      return null;\r\n    }\r\n\r\n    const startPos = startNode.getBoundingClientRect();\r\n    const endPos = endNode.getBoundingClientRect();\r\n\r\n    x1 = startPos.x + startPos.width / 2;\r\n    y1 = startPos.y + startPos.height / 2;\r\n\r\n    x2 = endPos.x + endPos.width / 2;\r\n    y2 = endPos.y + endPos.height / 2;\r\n\r\n    if (x2 - x1 > 100) {\r\n      let cx1, cy1, cx2, cy2;\r\n\r\n      cx1 = x1 + (x2 - x1) * 0.8;\r\n      cy1 = y1;\r\n\r\n      cx2 = x1 + (x2 - x1) * 0.2;\r\n      cy2 = y2;\r\n\r\n      // prettier-ignore\r\n      if (curlyFries) return (\r\n        <path\r\n        className={isActive? 'active' : ''}\r\n          fill=\"none\"\r\n          d={`M${x1},${y1}\r\n              C${cx1},${cy1} ${cx2},${cy2}\r\n              ${x2},${y2}`}\r\n        />\r\n      );\r\n    } else {\r\n      let cx1, cy1, cx2, cy2;\r\n      let hx1, hy1, hx2, hy2;\r\n      let cx3, cy3, cx4, cy4;\r\n\r\n      let tooClose = x2 - x1 > 0;\r\n\r\n      const halfY = Math.abs(y2 - y1) * 0.5;\r\n      const midY = y1 + (y2 - y1) * 0.5;\r\n      const midX = x1 + (x2 - x1) * 0.5;\r\n\r\n      cx1 = x1 + halfY;\r\n      cy1 = y1;\r\n\r\n      cx2 = x1 + halfY;\r\n      cy2 = midY;\r\n\r\n      hx1 = tooClose ? midX : x1;\r\n      hy1 = cy2;\r\n\r\n      hx2 = tooClose ? midX : x2;\r\n      hy2 = y1 + halfY;\r\n\r\n      cx3 = x2 - halfY;\r\n      cy3 = midY;\r\n\r\n      cx4 = x2 - halfY;\r\n      cy4 = y2;\r\n\r\n      // prettier-ignore\r\n      if (curlyFries) return (\r\n        <path\r\n          className={isActive? 'active' : ''}\r\n          fill=\"none\"\r\n          d={`M${x1},${y1}\r\n              C${cx1},${cy1} ${cx2},${cy2} ${hx1},${hy1}\r\n              H${hx2}\r\n              C${cx3},${cy3} ${cx4},${cy4} ${x2},${y2}\r\n          `}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    if (!startNode) {\r\n      return null;\r\n    }\r\n\r\n    const startPos = startNode.getBoundingClientRect();\r\n\r\n    x1 = startPos.x + startPos.width / 2;\r\n    y1 = startPos.y + startPos.height / 2;\r\n\r\n    x2 = mousePos.x;\r\n    y2 = mousePos.y;\r\n  }\r\n\r\n  return (\r\n    <line\r\n      className={isActive ? \"active\" : \"\"}\r\n      x1={x1}\r\n      y1={y1}\r\n      x2={x2}\r\n      y2={y2}\r\n    />\r\n  );\r\n};\r\n\r\nconst saveAppState = () => {\r\n  try {\r\n    const data = JSON.stringify({\r\n      circuit: circuit.toJS(),\r\n      customGates: customGates.map((gate) => {\r\n        return gate.classPointer.initialArgs;\r\n      }),\r\n    });\r\n    localStorage.setItem(LOCALSTORAGE_KEY, data);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => {\r\n    // saveAppStateDebounced();\r\n    updateState({});\r\n  }, []);\r\n\r\n  const onConnection = (a, b) => {\r\n    circuit.addConnection(a, b);\r\n\r\n    forceUpdate();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      onDragOver={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <div\r\n        className=\"circuit\"\r\n        onDrop={(e) => {\r\n          if (currentlyDraggingGate) {\r\n            circuit.addGate(\r\n              currentlyDraggingGate.classPointer,\r\n              e.clientX,\r\n              e.clientY\r\n            );\r\n            currentlyDraggingGate = null;\r\n            forceUpdate();\r\n          }\r\n        }}\r\n        onMouseDown={() => {\r\n          if (connectionStart) {\r\n            connectionStart = null;\r\n            forceUpdate();\r\n          }\r\n        }}\r\n        onMouseUp={() => {\r\n          if (currentlyMovingGate) {\r\n            currentlyMovingGate = null;\r\n            forceUpdate();\r\n          }\r\n        }}\r\n        onTouchEnd={() => {\r\n          // const shouldUpdate = connectionStart || currentlyMovingGate;\r\n          // connectionStart = null;\r\n          // currentlyMovingGate = null;\r\n          // if (shouldUpdate) {\r\n          //   forceUpdate();\r\n          // }\r\n        }}\r\n        onMouseMove={(e) => {\r\n          let shouldUpdate = false;\r\n          if (connectionStart) {\r\n            mousePos.x = e.clientX;\r\n            mousePos.y = e.clientY;\r\n            shouldUpdate = true;\r\n          }\r\n\r\n          if (currentlyMovingGate) {\r\n            const xDiff = e.clientX - currentlyMovingGate.startMousePos.x;\r\n            const yDiff = e.clientY - currentlyMovingGate.startMousePos.y;\r\n\r\n            const x = currentlyMovingGate.startGatePos.x + xDiff;\r\n            const y = currentlyMovingGate.startGatePos.y + yDiff;\r\n\r\n            circuit.gates[currentlyMovingGate.gateId].position.x = x;\r\n            circuit.gates[currentlyMovingGate.gateId].position.y = y;\r\n\r\n            shouldUpdate = true;\r\n          }\r\n\r\n          if (shouldUpdate) {\r\n            forceUpdate();\r\n          }\r\n        }}\r\n        onTouchMove={(e) => {\r\n          // if (connectionStart) {\r\n          //   mousePos.x = e.touches[0].clientX;\r\n          //   mousePos.y = e.touches[0].clientY;\r\n          //   forceUpdate();\r\n          // }\r\n          // if (currentlyMovingGate) {\r\n          //   const xDiff =\r\n          //     e.touches[0].clientX - currentlyMovingGate.startMousePos.x;\r\n          //   const yDiff =\r\n          //     e.touches[0].clientY - currentlyMovingGate.startMousePos.y;\r\n          //   const x = currentlyMovingGate.startGatePos.x + xDiff;\r\n          //   const y = currentlyMovingGate.startGatePos.y + yDiff;\r\n          //   circuit.gates[currentlyMovingGate.gateId].position.x = x;\r\n          //   circuit.gates[currentlyMovingGate.gateId].position.y = y;\r\n          //   forceUpdate();\r\n          // }\r\n        }}\r\n      >\r\n        <div\r\n          className=\"circuit-inputs\"\r\n          onClick={(e) => {\r\n            circuit.addInput(e.clientY - 20);\r\n            forceUpdate();\r\n          }}\r\n        >\r\n          {Object.values(circuit.inputById).map((input) => (\r\n            <InputNode\r\n              key={input.id}\r\n              input={input}\r\n              connections={circuit.connections}\r\n              onMouseDown={(e) => {\r\n                e.stopPropagation();\r\n                if (!connectionStart) {\r\n                  connectionStart = input.id;\r\n                  mousePos.x = e.clientX;\r\n                  mousePos.y = e.clientY;\r\n                }\r\n              }}\r\n              onMouseUp={(e) => {\r\n                e.stopPropagation();\r\n              }}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (e.shiftKey) {\r\n                  circuit.removeInput(input.id);\r\n                } else if (e.ctrlKey) {\r\n                  connectionStart = input.id;\r\n                  mousePos.x = e.clientX;\r\n                  mousePos.y = e.clientY;\r\n                } else {\r\n                  connectionStart = null;\r\n                  input.toggle();\r\n                  circuit.allDestinations(input.id).forEach((destination) => {\r\n                    circuit.updateNode(destination);\r\n                  });\r\n                }\r\n                forceUpdate();\r\n              }}\r\n              onTouchStart={() => {\r\n                // if (connectionStart) {\r\n                //   return;\r\n                // }\r\n                // connectionStart = input.id;\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div\r\n          className=\"circuit-outputs\"\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            circuit.addOutput(e.clientY - 20);\r\n            forceUpdate();\r\n          }}\r\n        >\r\n          {Object.values(circuit.outputById).map((output) => (\r\n            <OutputNode\r\n              key={output.id}\r\n              output={output}\r\n              connections={circuit.connections}\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                if (e.shiftKey) {\r\n                  circuit.removeOutput(output.id);\r\n                }\r\n                forceUpdate();\r\n              }}\r\n              onMouseUp={() => {\r\n                if (connectionStart) {\r\n                  onConnection(connectionStart, output.id);\r\n                }\r\n\r\n                connectionStart = null;\r\n              }}\r\n              onTouchEnd={() => {\r\n                // if (connectionStart) {\r\n                //   onConnection(connectionStart, output.id);\r\n                // }\r\n                // connectionStart = null;\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n        {Object.values(circuit.gates).map((gate) => (\r\n          <GateNode\r\n            key={gate.id}\r\n            gate={gate}\r\n            connections={circuit.connections}\r\n            onConnectionMade={onConnection}\r\n            onRemove={() => forceUpdate()}\r\n          />\r\n        ))}\r\n        <svg>\r\n          {Array.from(circuit.connections).map((connection) => {\r\n            const [start, end] = connection.split(\"-\");\r\n            return (\r\n              <Connection key={connection} complete start={start} end={end} />\r\n            );\r\n          })}\r\n          {connectionStart && (\r\n            <>\r\n              <Connection start={connectionStart} />\r\n            </>\r\n          )}\r\n        </svg>\r\n      </div>\r\n      <div className=\"tools\">\r\n        <div className=\"tools-save\">\r\n          <input\r\n            id=\"gate-name\"\r\n            className=\"tools-save-name\"\r\n            placeholder=\"New gate name\"\r\n          />\r\n          <button\r\n            className=\"tools-save-submit\"\r\n            onClick={(e) => {\r\n              const nameInput = document.getElementById(\"gate-name\");\r\n\r\n              if (nameInput.value.length) {\r\n                const gateClass = circuit.transformToGate(nameInput.value);\r\n\r\n                customGates.push({\r\n                  name: nameInput.value,\r\n                  classPointer: gateClass,\r\n                  id: availableGateId++,\r\n                });\r\n\r\n                nameInput.value = \"\";\r\n                circuit = new EmptyCurcuit();\r\n\r\n                forceUpdate();\r\n              }\r\n            }}\r\n          >\r\n            Create\r\n          </button>\r\n          &nbsp;\r\n          <button\r\n            onClick={() => {\r\n              curlyFries = !curlyFries;\r\n              forceUpdate();\r\n            }}\r\n            className=\"toggle-curly-fries\"\r\n          >\r\n            Curves: {curlyFries ? \"ON\" : \"OFF\"}\r\n          </button>\r\n        </div>\r\n        <div className=\"tools-gates\">\r\n          {availableGates.concat(customGates).map((gate) => (\r\n            <button\r\n              className=\"tools-gate\"\r\n              key={gate.name}\r\n              style={{ background: `#${gate.classPointer.color}` }}\r\n              onClick={(e) => {\r\n                circuit.addGate(gate.classPointer, 50, 20);\r\n                forceUpdate();\r\n              }}\r\n              draggable=\"true\"\r\n              onDragStart={(e) => {\r\n                currentlyDraggingGate = gate;\r\n              }}\r\n            >\r\n              {gate.name}\r\n            </button>\r\n          ))}\r\n          {/* {customGates.map((gate) => (\r\n            <button\r\n              className=\"tools-gate\"\r\n              key={gate.name}\r\n              style={{ background: `#${gate.classPointer.color}` }}\r\n              onClick={(e) => {\r\n                console.log(\"click\");\r\n                circuit.addGate(gate.classPointer, 50, 20);\r\n                forceUpdate();\r\n              }}\r\n              onDragStart={() => {\r\n                console.log(\"drag start\");\r\n              }}\r\n            >\r\n              {gate.name}\r\n            </button>\r\n          ))} */}\r\n        </div>\r\n      </div>\r\n      <div className=\"state-manager\">\r\n        <br />\r\n        <button\r\n          onClick={() => {\r\n            circuit = new EmptyCurcuit();\r\n            forceUpdate();\r\n          }}\r\n        >\r\n          Reset Current Curcuit\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            localStorage.removeItem(LOCALSTORAGE_KEY);\r\n            window.location.reload();\r\n          }}\r\n        >\r\n          Reset Whole State\r\n        </button>\r\n        <br />\r\n        (buggy atm):\r\n        <button\r\n          onClick={() => {\r\n            saveAppState();\r\n          }}\r\n        >\r\n          Save State\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            loadAppState();\r\n            forceUpdate();\r\n          }}\r\n        >\r\n          Load State\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst loadAppState = () => {\r\n  try {\r\n    const json = localStorage.getItem(LOCALSTORAGE_KEY);\r\n    if (json) {\r\n      const data = JSON.parse(json);\r\n      const gates = data.customGates.map((v) => JSON.parse(v));\r\n      for (const args of gates) {\r\n        const gateClass = createCircuit(\r\n          args.name,\r\n          args.inputs,\r\n          args.outputs,\r\n          args.gates.map((g) => {\r\n            const constructorClass = availableGates\r\n              .concat(customGates)\r\n              .find(\r\n                (gateConstructor) =>\r\n                  gateConstructor.classPointer.staticName === g.constructorName\r\n              );\r\n            if (constructorClass) {\r\n              g.constructorClass = constructorClass.classPointer;\r\n            }\r\n            return g;\r\n          }),\r\n          args.connections\r\n        );\r\n        customGates.push({\r\n          name: args.name,\r\n          classPointer: gateClass,\r\n          id: availableGateId++,\r\n        });\r\n      }\r\n\r\n      circuit.fromJS(data.circuit);\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    // localStorage.removeItem(LOCALSTORAGE_KEY);\r\n  }\r\n};\r\n\r\nconst saveAppStateDebounced = debounce(saveAppState, 300);\r\n\r\nconst EmptyCurcuit = createCircuit(\"BASE\", 0, 0, [], []);\r\n\r\nlet circuit = new EmptyCurcuit();\r\n\r\nconst AND_Gate = createCircuit(\"AND\", 2, 1, [], [], function (gate) {\r\n  const i1 = gate.inputById[gate.inputs[0]];\r\n  const i2 = gate.inputById[gate.inputs[1]];\r\n  const o1 = gate.outputById[gate.outputs[0]];\r\n\r\n  if (i1.value === 1 && i2.value === 1) {\r\n    o1.state = 1;\r\n  } else {\r\n    o1.state = 0;\r\n  }\r\n});\r\n\r\nconst NOT_Gate = createCircuit(\"NOT\", 1, 1, [], [], function (gate) {\r\n  const i1 = gate.inputById[gate.inputs[0]];\r\n  const o1 = gate.outputById[gate.outputs[0]];\r\n\r\n  if (i1.value === 1) {\r\n    o1.state = 0;\r\n  } else {\r\n    o1.state = 1;\r\n  }\r\n});\r\n\r\nlet connectionStart = null;\r\nlet currentlyMovingGate = null;\r\nlet currentlyDraggingGate = null;\r\nlet curlyFries = true;\r\nlet mousePos = { x: 0, y: 0 };\r\nlet availableGateId = 1;\r\nconst availableGates = [\r\n  { classPointer: AND_Gate, name: \"AND\", id: availableGateId++ },\r\n  { classPointer: NOT_Gate, name: \"NOT\", id: availableGateId++ },\r\n];\r\nconst customGates = [];\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}