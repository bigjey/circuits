{"version":3,"sources":["App.js","index.js"],"names":["Input","id","x","y","position","state","this","Output","NOT_Gate","name","type","inputs","outputs","push","evaluate","value","AND_Gate","InputNode","input","rest","connections","className","style","left","top","OutputNode","output","right","GateNode","gate","onConnectionMade","map","onMouseUp","connectionStart","onMouseDown","Connection","x1","y1","x2","y2","start","end","complete","startNode","document","getElementById","endNode","startPos","getBoundingClientRect","endPos","width","height","mousePos","curcuit","_gateId","_inputId","_outputId","gates","Set","gateClass","a","b","add","split","updateOutput","updateGate","console","error","inputId","outputId","source","find","destination","signals","values","gateId","gateInput","allIncomingSignals","signal","log","gateOutput","allOutcomingSignals","addGate","App","React","useState","updateState","forceUpdate","useCallback","onConnection","addConnection","onMouseMove","e","clientX","clientY","onClick","addInput","addOutput","Object","ctrlKey","removeInput","toggle","removeOutput","Array","from","connection","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ee268330.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React from \"react\";\n\nclass Input {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n\n  toggle() {\n    if (this.state === 0) {\n      this.state = 1;\n    } else {\n      this.state = 0;\n    }\n  }\n}\n\nclass Output {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n}\n\nclass NOT_Gate {\n  name = \"NOT\";\n  type = \"not\";\n  position = { x: 0, y: 0 };\n\n  inputs = [];\n\n  outputs = [];\n\n  constructor(id, x, y) {\n    this.id = id;\n\n    this.position.x = x;\n    this.position.y = y;\n\n    this.inputs.push(new Input(`${this.id}:i1`));\n\n    this.outputs.push(new Output(`${this.id}:o1`));\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    if (this.inputs[0].value === 1) {\n      this.outputs[0].state = 0;\n    } else {\n      this.outputs[0].state = 1;\n    }\n  }\n}\n\nclass AND_Gate {\n  name = \"AND\";\n  type = \"and\";\n  position = { x: 0, y: 0 };\n\n  inputs = [];\n\n  outputs = [];\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n\n    this.inputs.push(new Input(`${this.id}:i1`));\n    this.inputs.push(new Input(`${this.id}:i2`));\n\n    this.outputs.push(new Output(`${this.id}:o1`));\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    if (this.inputs[0].value === 1 && this.inputs[1].value === 1) {\n      this.outputs[0].state = 1;\n    } else {\n      this.outputs[0].state = 0;\n    }\n  }\n}\n\nclass Circuit {\n  _gateId = 1;\n  _inputId = 1;\n  _outputId = 1;\n\n  inputs = {};\n  outputs = {};\n  gates = {};\n  connections = new Set();\n\n  addInput(y) {\n    const input = new Input(`c:i${this._inputId++}`, 0, y);\n\n    this.inputs[input.id] = input;\n  }\n\n  addOutput(y) {\n    const output = new Output(`c:o${this._outputId++}`, 0, y);\n\n    this.outputs[output.id] = output;\n  }\n\n  addGate(gateClass, x, y) {\n    const id = `g${this._gateId++}`;\n    const gate = new gateClass(id, x, y);\n\n    this.gates[gate.id] = gate;\n  }\n\n  addConnection(a, b) {\n    this.connections.add(`${a}-${b}`);\n\n    const [gate] = b.split(\":\");\n\n    if (gate === \"c\") {\n      this.updateOutput(b);\n    } else if (this.gates[gate]) {\n      this.updateGate(gate);\n    } else {\n      console.error(\"unknown destination\", b);\n    }\n  }\n\n  removeInput(inputId) {\n    delete this.inputs[inputId];\n  }\n\n  removeOutput(outputId) {\n    delete this.outputs[outputId];\n  }\n\n  getSourceValue(source) {\n    const [gate] = source.split(\":\");\n    if (gate === \"c\") {\n      return this.inputs[source].value;\n    } else {\n      return this.gates[gate].outputs.find((output) => output.id === source)\n        .value;\n    }\n  }\n\n  allIncomingSignals(destination) {\n    const signals = [];\n    for (const connection of this.connections.values()) {\n      const [a, b] = connection.split(\"-\");\n      if (b === destination) {\n        signals.push(a);\n      }\n    }\n    return signals;\n  }\n\n  allOutcomingSignals(source) {\n    const signals = [];\n    for (const connection of this.connections.values()) {\n      const [a, b] = connection.split(\"-\");\n      if (a === source) {\n        signals.push(b);\n      }\n    }\n    return signals;\n  }\n\n  updateGate(gateId) {\n    const gate = this.gates[gateId];\n\n    for (const gateInput of gate.inputs) {\n      gateInput.state = 0;\n      for (const signal of this.allIncomingSignals(gateInput.id)) {\n        console.log({ signal });\n        const [gate] = signal.split(\":\");\n        let value;\n        if (gate === \"c\") {\n          value = this.inputs[signal].value;\n        } else {\n          value = this.gates[gate].outputs.find(\n            (output) => output.id === signal\n          ).value;\n        }\n        if (value === 1) {\n          gateInput.state = 1;\n          break;\n        }\n      }\n    }\n\n    gate.evaluate();\n\n    for (const gateOutput of gate.outputs) {\n      console.log({ gateOutput });\n      for (const signal of this.allOutcomingSignals(gateOutput.id)) {\n        console.log({ signal });\n        const [gate] = signal.split(\":\");\n        if (gate === \"c\") {\n          this.updateOutput(signal);\n        } else {\n          this.updateGate(gate);\n        }\n      }\n    }\n  }\n\n  updateOutput(outputId) {\n    for (const signal of curcuit.allIncomingSignals(outputId)) {\n      const [gate] = signal.split(\":\");\n      let value;\n      if (gate === \"c\") {\n        value = this.inputs[signal].value;\n      } else {\n        value = this.gates[gate].outputs.find(\n          (output) => output.id === signal\n        ).value;\n      }\n      if (value === 1) {\n        this.outputs[outputId].state = 1;\n        return;\n      }\n    }\n\n    this.outputs[outputId].state = 0;\n  }\n}\n\nconst InputNode = ({ input, connections, ...rest }) => {\n  return (\n    <div\n      id={input.id}\n      {...rest}\n      className={`circuit-input ${input.value === 1 ? \"circuit-input-on\" : \"\"}`}\n      style={{\n        left: input.position.x,\n        top: input.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst OutputNode = ({ output, connections, ...rest }) => {\n  return (\n    <div\n      id={output.id}\n      {...rest}\n      className={`circuit-output ${\n        output.value === 1 ? \"circuit-output-on\" : \"\"\n      }`}\n      style={{\n        right: output.position.x,\n        top: output.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst GateNode = ({ gate, connections, onConnectionMade }) => {\n  return (\n    <div\n      id={gate.id}\n      className={`circuit-gate circuit-gate-${gate.type}`}\n      style={{\n        left: gate.position.x,\n        top: gate.position.y,\n      }}\n    >\n      <div className=\"circuit-gate-inputs\">\n        {gate.inputs.map((input) => (\n          <div\n            key={input.id}\n            id={input.id}\n            className={`circuit-gate-input ${\n              input.value === 1 ? \"circuit-gate-input-on\" : \"\"\n            }`}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnectionMade(connectionStart, input.id);\n              }\n\n              connectionStart = null;\n            }}\n          ></div>\n        ))}\n      </div>\n      <div className=\"circuit-gate-name\">{gate.name}</div>\n      <div className=\"circuit-gate-outputs\">\n        {gate.outputs.map((output) => (\n          <div\n            key={output.id}\n            id={output.id}\n            className={`circuit-gate-output ${\n              output.value === 1 ? \"circuit-gate-output-on\" : \"\"\n            }`}\n            onMouseDown={() => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = output.id;\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Connection = ({ start, end, complete = false }) => {\n  let x1, y1, x2, y2;\n\n  const startNode = document.getElementById(start);\n  const endNode = document.getElementById(end);\n\n  if (complete) {\n    if (!startNode || !endNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n    const endPos = endNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = endPos.x + endPos.width / 2;\n    y2 = endPos.y + endPos.height / 2;\n  } else {\n    if (!startNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = mousePos.x;\n    y2 = mousePos.y;\n  }\n\n  return <line x1={x1} y1={y1} x2={x2} y2={y2} />;\n};\n\nconst curcuit = new Circuit();\ncurcuit.addGate(AND_Gate, 100, 100);\ncurcuit.addGate(NOT_Gate, 300, 100);\n\nlet connectionStart = null;\nlet mousePos = { x: 0, y: 0 };\nfunction App() {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const onConnection = (a, b) => {\n    curcuit.addConnection(a, b);\n\n    forceUpdate();\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"circuit\"\n        onMouseUp={() => {\n          connectionStart = null;\n          forceUpdate();\n        }}\n        onMouseMove={(e) => {\n          if (connectionStart) {\n            mousePos.x = e.clientX;\n            mousePos.y = e.clientY;\n            forceUpdate();\n          }\n        }}\n      >\n        <div\n          className=\"curcuit-inputs\"\n          onClick={(e) => {\n            curcuit.addInput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        <div\n          className=\"curcuit-outputs\"\n          onClick={(e) => {\n            curcuit.addOutput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        {Object.values(curcuit.inputs).map((input) => (\n          <InputNode\n            key={input.id}\n            input={input}\n            connections={curcuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                curcuit.removeInput(input.id);\n              } else {\n                input.toggle();\n                for (const destination of curcuit.allOutcomingSignals(\n                  input.id\n                )) {\n                  const [gate] = destination.split(\":\");\n                  if (curcuit.gates[gate]) {\n                    curcuit.updateGate(gate);\n                  } else if (gate === \"c\") {\n                    curcuit.updateOutput(destination);\n                  }\n                }\n              }\n\n              forceUpdate();\n            }}\n            onMouseDown={() => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = input.id;\n            }}\n          />\n        ))}\n        {Object.values(curcuit.outputs).map((output) => (\n          <OutputNode\n            key={output.id}\n            output={output}\n            connections={curcuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                curcuit.removeOutput(output.id);\n              }\n              forceUpdate();\n            }}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnection(connectionStart, output.id);\n              }\n\n              connectionStart = null;\n            }}\n          />\n        ))}\n        {Object.values(curcuit.gates).map((gate) => (\n          <GateNode\n            key={gate.id}\n            gate={gate}\n            connections={curcuit.connections}\n            onConnectionMade={onConnection}\n          />\n        ))}\n        <svg>\n          {Array.from(curcuit.connections).map((connection) => {\n            const [start, end] = connection.split(\"-\");\n            return (\n              <Connection key={connection} complete start={start} end={end} />\n            );\n          })}\n          {connectionStart && (\n            <>\n              <Connection start={connectionStart} />\n            </>\n          )}\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}