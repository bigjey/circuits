{"version":3,"sources":["App.js","index.js"],"names":["Input","id","x","y","position","state","this","Output","NOT_Gate","name","type","inputs","outputs","push","evaluate","value","AND_Gate","InputNode","input","rest","connections","className","style","left","top","OutputNode","output","right","GateNode","gate","onConnectionMade","onMouseDown","e","currentlyMovingGate","gateId","startMousePos","clientX","clientY","startGatePos","map","onMouseUp","connectionStart","stopPropagation","Connection","x1","y1","x2","y2","start","end","complete","startNode","document","getElementById","endNode","startPos","getBoundingClientRect","endPos","width","height","mousePos","circuit","_gateId","_inputId","_outputId","gates","Set","gateClass","a","b","add","split","updateOutput","updateGate","console","error","inputId","updateList","Array","from","connection","source","destination","delete","item","outputId","allIncomingSignals","find","signals","values","gateInput","signal","getSourceValue","gateOutput","allOutcomingSignals","addGate","availableGates","classPointer","App","React","useState","updateState","forceUpdate","useCallback","onConnection","addConnection","onMouseMove","xDiff","yDiff","onClick","addInput","addOutput","Object","ctrlKey","removeInput","toggle","removeOutput","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.56926631.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React from \"react\";\n\nclass Input {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n\n  toggle() {\n    if (this.state === 0) {\n      this.state = 1;\n    } else {\n      this.state = 0;\n    }\n  }\n}\n\nclass Output {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n}\n\nclass NOT_Gate {\n  name = \"NOT\";\n  type = \"not\";\n  position = { x: 0, y: 0 };\n\n  inputs = [];\n\n  outputs = [];\n\n  constructor(id, x, y) {\n    this.id = id;\n\n    this.position.x = x;\n    this.position.y = y;\n\n    this.inputs.push(new Input(`${this.id}:i1`));\n\n    this.outputs.push(new Output(`${this.id}:o1`));\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    if (this.inputs[0].value === 1) {\n      this.outputs[0].state = 0;\n    } else {\n      this.outputs[0].state = 1;\n    }\n  }\n}\n\nclass AND_Gate {\n  name = \"AND\";\n  type = \"and\";\n  position = { x: 0, y: 0 };\n\n  inputs = [];\n\n  outputs = [];\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n\n    this.inputs.push(new Input(`${this.id}:i1`));\n    this.inputs.push(new Input(`${this.id}:i2`));\n\n    this.outputs.push(new Output(`${this.id}:o1`));\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    if (this.inputs[0].value === 1 && this.inputs[1].value === 1) {\n      this.outputs[0].state = 1;\n    } else {\n      this.outputs[0].state = 0;\n    }\n  }\n}\n\nclass Circuit {\n  _gateId = 1;\n  _inputId = 1;\n  _outputId = 1;\n\n  inputs = {};\n  outputs = {};\n  gates = {};\n  connections = new Set();\n\n  addInput(y) {\n    const input = new Input(`c:i${this._inputId++}`, 0, y);\n\n    this.inputs[input.id] = input;\n  }\n\n  addOutput(y) {\n    const output = new Output(`c:o${this._outputId++}`, 0, y);\n\n    this.outputs[output.id] = output;\n  }\n\n  addGate(gateClass, x, y) {\n    const id = `g${this._gateId++}`;\n    const gate = new gateClass(id, x, y);\n\n    this.gates[gate.id] = gate;\n  }\n\n  addConnection(a, b) {\n    this.connections.add(`${a}-${b}`);\n\n    const [gate] = b.split(\":\");\n\n    if (gate === \"c\") {\n      this.updateOutput(b);\n    } else if (this.gates[gate]) {\n      this.updateGate(gate);\n    } else {\n      console.error(\"unknown destination\", b);\n    }\n  }\n\n  removeInput(inputId) {\n    delete this.inputs[inputId];\n\n    const updateList = new Set();\n\n    for (const connection of Array.from(this.connections)) {\n      const [source, destination] = connection.split(\"-\");\n      if (source === inputId) {\n        this.connections.delete(connection);\n\n        const [gate] = destination.split(\":\");\n        if (gate === \"c\") {\n          updateList.add(destination);\n        } else {\n          updateList.add(gate);\n        }\n      }\n    }\n\n    for (const item of updateList) {\n      if (item[0] === \"c\") {\n        this.updateOutput(item);\n      } else {\n        this.updateGate(item);\n      }\n    }\n  }\n\n  removeOutput(outputId) {\n    delete this.outputs[outputId];\n\n    for (const source of this.allIncomingSignals(outputId)) {\n      this.connections.delete(`${source}-${outputId}`);\n    }\n  }\n\n  getSourceValue(source) {\n    const [gate] = source.split(\":\");\n    if (gate === \"c\") {\n      return this.inputs[source].value;\n    } else {\n      return this.gates[gate].outputs.find((output) => output.id === source)\n        .value;\n    }\n  }\n\n  allIncomingSignals(destination) {\n    const signals = [];\n    for (const connection of this.connections.values()) {\n      const [a, b] = connection.split(\"-\");\n      if (b === destination) {\n        signals.push(a);\n      }\n    }\n    return signals;\n  }\n\n  allOutcomingSignals(source) {\n    const signals = [];\n    for (const connection of this.connections.values()) {\n      const [a, b] = connection.split(\"-\");\n      if (a === source) {\n        signals.push(b);\n      }\n    }\n    return signals;\n  }\n\n  updateGate(gateId) {\n    const gate = this.gates[gateId];\n\n    for (const gateInput of gate.inputs) {\n      gateInput.state = 0;\n      for (const signal of this.allIncomingSignals(gateInput.id)) {\n        const value = this.getSourceValue(signal);\n        if (value === 1) {\n          gateInput.state = 1;\n          break;\n        }\n      }\n    }\n\n    gate.evaluate();\n\n    for (const gateOutput of gate.outputs) {\n      for (const signal of this.allOutcomingSignals(gateOutput.id)) {\n        const [gate] = signal.split(\":\");\n        if (gate === \"c\") {\n          this.updateOutput(signal);\n        } else {\n          this.updateGate(gate);\n        }\n      }\n    }\n  }\n\n  updateOutput(outputId) {\n    for (const signal of circuit.allIncomingSignals(outputId)) {\n      const value = this.getSourceValue(signal);\n      if (value === 1) {\n        this.outputs[outputId].state = 1;\n        return;\n      }\n    }\n\n    this.outputs[outputId].state = 0;\n  }\n}\n\nconst InputNode = ({ input, connections, ...rest }) => {\n  return (\n    <div\n      id={input.id}\n      {...rest}\n      className={`circuit-input ${input.value === 1 ? \"circuit-input-on\" : \"\"}`}\n      style={{\n        left: input.position.x,\n        top: input.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst OutputNode = ({ output, connections, ...rest }) => {\n  return (\n    <div\n      id={output.id}\n      {...rest}\n      className={`circuit-output ${\n        output.value === 1 ? \"circuit-output-on\" : \"\"\n      }`}\n      style={{\n        right: output.position.x,\n        top: output.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst GateNode = ({ gate, connections, onConnectionMade }) => {\n  return (\n    <div\n      id={gate.id}\n      className={`circuit-gate circuit-gate-${gate.type}`}\n      style={{\n        left: gate.position.x,\n        top: gate.position.y,\n      }}\n      onMouseDown={(e) => {\n        if (currentlyMovingGate) {\n          return;\n        }\n\n        currentlyMovingGate = {\n          gateId: gate.id,\n          startMousePos: {\n            x: e.clientX,\n            y: e.clientY,\n          },\n          startGatePos: {\n            x: gate.position.x,\n            y: gate.position.y,\n          },\n        };\n      }}\n    >\n      <div className=\"circuit-gate-inputs\">\n        {gate.inputs.map((input) => (\n          <div\n            key={input.id}\n            id={input.id}\n            className={`circuit-gate-input ${\n              input.value === 1 ? \"circuit-gate-input-on\" : \"\"\n            }`}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnectionMade(connectionStart, input.id);\n              }\n\n              connectionStart = null;\n            }}\n          ></div>\n        ))}\n      </div>\n      <div className=\"circuit-gate-name\">{gate.name}</div>\n      <div className=\"circuit-gate-outputs\">\n        {gate.outputs.map((output) => (\n          <div\n            key={output.id}\n            id={output.id}\n            className={`circuit-gate-output ${\n              output.value === 1 ? \"circuit-gate-output-on\" : \"\"\n            }`}\n            onMouseDown={(e) => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = output.id;\n              e.stopPropagation();\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Connection = ({ start, end, complete = false }) => {\n  let x1, y1, x2, y2;\n\n  const startNode = document.getElementById(start);\n  const endNode = document.getElementById(end);\n\n  if (complete) {\n    if (!startNode || !endNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n    const endPos = endNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = endPos.x + endPos.width / 2;\n    y2 = endPos.y + endPos.height / 2;\n  } else {\n    if (!startNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = mousePos.x;\n    y2 = mousePos.y;\n  }\n\n  return <line x1={x1} y1={y1} x2={x2} y2={y2} />;\n};\n\nconst circuit = new Circuit();\ncircuit.addGate(AND_Gate, 100, 100);\ncircuit.addGate(NOT_Gate, 300, 100);\n\nlet connectionStart = null;\nlet currentlyMovingGate = null;\nlet movingDiff = { x: 0, y: 0 };\nlet mousePos = { x: 0, y: 0 };\nconst availableGates = [\n  { classPointer: AND_Gate, name: \"AND\" },\n  { classPointer: NOT_Gate, name: \"NOT\" },\n];\n\nfunction App() {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const onConnection = (a, b) => {\n    circuit.addConnection(a, b);\n\n    forceUpdate();\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"circuit\"\n        onMouseUp={() => {\n          connectionStart = null;\n          currentlyMovingGate = null;\n\n          forceUpdate();\n        }}\n        onMouseMove={(e) => {\n          if (connectionStart) {\n            mousePos.x = e.clientX;\n            mousePos.y = e.clientY;\n            forceUpdate();\n          }\n\n          if (currentlyMovingGate) {\n            const xDiff = e.clientX - currentlyMovingGate.startMousePos.x;\n            const yDiff = e.clientY - currentlyMovingGate.startMousePos.y;\n\n            const x = currentlyMovingGate.startGatePos.x + xDiff;\n            const y = currentlyMovingGate.startGatePos.y + yDiff;\n\n            circuit.gates[currentlyMovingGate.gateId].position.x = x;\n            circuit.gates[currentlyMovingGate.gateId].position.y = y;\n\n            forceUpdate();\n          }\n        }}\n      >\n        <div\n          className=\"circuit-inputs\"\n          onClick={(e) => {\n            circuit.addInput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        <div\n          className=\"circuit-outputs\"\n          onClick={(e) => {\n            circuit.addOutput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        {Object.values(circuit.inputs).map((input) => (\n          <InputNode\n            key={input.id}\n            input={input}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                circuit.removeInput(input.id);\n              } else {\n                input.toggle();\n                for (const destination of circuit.allOutcomingSignals(\n                  input.id\n                )) {\n                  const [gate] = destination.split(\":\");\n                  if (circuit.gates[gate]) {\n                    circuit.updateGate(gate);\n                  } else if (gate === \"c\") {\n                    circuit.updateOutput(destination);\n                  }\n                }\n              }\n\n              forceUpdate();\n            }}\n            onMouseDown={() => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = input.id;\n            }}\n          />\n        ))}\n        {Object.values(circuit.outputs).map((output) => (\n          <OutputNode\n            key={output.id}\n            output={output}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                circuit.removeOutput(output.id);\n              }\n              forceUpdate();\n            }}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnection(connectionStart, output.id);\n              }\n\n              connectionStart = null;\n            }}\n          />\n        ))}\n        {Object.values(circuit.gates).map((gate) => (\n          <GateNode\n            key={gate.id}\n            gate={gate}\n            connections={circuit.connections}\n            onConnectionMade={onConnection}\n          />\n        ))}\n        <svg>\n          {Array.from(circuit.connections).map((connection) => {\n            const [start, end] = connection.split(\"-\");\n            return (\n              <Connection key={connection} complete start={start} end={end} />\n            );\n          })}\n          {connectionStart && (\n            <>\n              <Connection start={connectionStart} />\n            </>\n          )}\n        </svg>\n      </div>\n      {availableGates.map((gate) => (\n        <div\n          onClick={() => {\n            circuit.addGate(gate.classPointer, 300, 300);\n            forceUpdate();\n          }}\n        >\n          {gate.name}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}