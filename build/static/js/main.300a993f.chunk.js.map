{"version":3,"sources":["App.js","index.js"],"names":["Input","id","x","y","position","state","this","Output","_globalGateId","CircuitBase","inputs","outputs","gates","connections","evaluationFn","inputById","outputById","Set","_inputId","_outputId","inputIndex","input","push","outputIndex","output","gateByOldId","gate","g","constructorClass","oldId","connection","source","destination","type","oldIndex","gateId","nodeId","console","log","add","evaluate","Object","values","allDestinations","forEach","updateNode","gateClass","inputId","splice","indexOf","updateList","split","delete","outputId","allSources","destinations","_source","_destination","sources","value","updateGate","updateOutput","getSourceValue","name","inputsCount","length","outputsCount","constructor","conn","sourceGate","sourceId","destinationGate","destinationId","createCircuit","evalFn","InputNode","rest","className","style","left","top","OutputNode","right","GateNode","onConnectionMade","onMouseDown","e","currentlyMovingGate","startMousePos","clientX","clientY","startGatePos","map","onMouseUp","connectionStart","stopPropagation","Connection","x1","y1","x2","y2","start","end","complete","startNode","document","getElementById","endNode","startPos","getBoundingClientRect","endPos","width","height","mousePos","EmptyCurcuit","circuit","AND_Gate","i1","i2","o1","NOT_Gate","availableGates","classPointer","window","App","React","useState","updateState","forceUpdate","useCallback","onConnection","a","b","addConnection","onMouseMove","xDiff","yDiff","onClick","addInput","addOutput","ctrlKey","removeInput","toggle","removeOutput","Array","from","placeholder","nameInput","transformToGate","addGate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.300a993f.chunk.js","sourcesContent":["import \"./App.css\";\n\nimport React from \"react\";\n\nclass Input {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n\n  toggle() {\n    if (this.state === 0) {\n      this.state = 1;\n    } else {\n      this.state = 0;\n    }\n  }\n}\n\nclass Output {\n  position = { x: 0, y: 0 };\n\n  state = 0;\n\n  constructor(id, x, y) {\n    this.id = id;\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  get value() {\n    return this.state;\n  }\n}\n\nlet _globalGateId = 1;\n\nclass CircuitBase {\n  inputs = [];\n  inputById = {};\n\n  outputs = [];\n  outputById = {};\n\n  gates = {};\n  connections = new Set();\n\n  _inputId = 0;\n  _outputId = 0;\n\n  position = { x: 0, y: 0 };\n\n  constructor(inputs, outputs, gates, connections, evaluationFn) {\n    this.id = _globalGateId++;\n\n    for (let inputIndex = 0; inputIndex < inputs; ++inputIndex) {\n      const input = new Input(`${this.id}:i${this._inputId++}`, 0, 0);\n      this.inputById[input.id] = input;\n      this.inputs.push(input.id);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputs; ++outputIndex) {\n      const output = new Output(`${this.id}:o${this._outputId++}`, 0, 0);\n      this.outputById[output.id] = output;\n      this.outputs.push(output.id);\n    }\n\n    const gateByOldId = {};\n    for (const gate of gates) {\n      const g = new gate.constructorClass();\n      this.gates[g.id] = g;\n      gateByOldId[gate.oldId] = g;\n    }\n\n    for (const connection of connections) {\n      let source,\n        destination = \"\";\n\n      if (connection.source.type === \"self-input\") {\n        source = `${this.id}:i${connection.source.oldIndex}`;\n      } else if (connection.source.type === \"gate-output\") {\n        source = `${gateByOldId[connection.source.gateId].id}:${\n          connection.source.nodeId\n        }`;\n      } else {\n        console.log(\"wtf???\");\n      }\n\n      if (connection.destination.type === \"self-output\") {\n        destination = `${this.id}:o${connection.destination.oldIndex}`;\n      } else if (connection.destination.type === \"gate-input\") {\n        destination = `${gateByOldId[connection.destination.gateId].id}:${\n          connection.destination.nodeId\n        }`;\n      } else {\n        console.log(\"wtf???\");\n      }\n\n      this.connections.add(`${source}-${destination}`);\n    }\n\n    if (evaluationFn) {\n      this.evaluate = () => evaluationFn(this);\n    }\n\n    this.evaluate();\n  }\n\n  evaluate() {\n    for (const input of Object.values(this.inputById)) {\n      this.allDestinations(input.id).forEach((nodeId) =>\n        this.updateNode(nodeId)\n      );\n    }\n  }\n\n  addInput(y) {\n    const input = new Input(`${this.id}:i${this._inputId++}`, 0, y);\n\n    this.inputById[input.id] = input;\n    this.inputs.push(input.id);\n  }\n\n  addOutput(y) {\n    const output = new Output(`${this.id}:o${this._outputId++}`, 0, y);\n\n    this.outputById[output.id] = output;\n    this.outputs.push(output.id);\n  }\n\n  addGate(gateClass, x, y) {\n    const gate = new gateClass(x, y);\n\n    this.gates[gate.id] = gate;\n  }\n\n  addConnection(source, destination) {\n    this.connections.add(`${source}-${destination}`);\n\n    this.updateNode(destination);\n  }\n\n  removeInput(inputId) {\n    delete this.inputById[inputId];\n    this.inputs.splice(this.inputs.indexOf(inputId));\n\n    const updateList = new Set();\n\n    for (const connection of this.connections) {\n      const [source, destination] = connection.split(\"-\");\n      if (source === inputId) {\n        this.connections.delete(connection);\n        updateList.add(destination);\n      }\n    }\n\n    for (const nodeId of updateList) {\n      this.updateNode(nodeId);\n    }\n  }\n\n  removeOutput(outputId) {\n    delete this.outputById[outputId];\n    this.outputs.splice(this.outputs.indexOf(outputId));\n\n    for (const source of this.allSources(outputId)) {\n      this.connections.delete(`${source}-${outputId}`);\n    }\n  }\n\n  allDestinations(source) {\n    const destinations = [];\n    for (const connection of this.connections.values()) {\n      const [_source, _destination] = connection.split(\"-\");\n      if (_source === source) {\n        destinations.push(_destination);\n      }\n    }\n    return destinations;\n  }\n\n  allSources(destination) {\n    const sources = [];\n    for (const connection of this.connections.values()) {\n      const [_source, _destination] = connection.split(\"-\");\n      if (_destination === destination) {\n        sources.push(_source);\n      }\n    }\n    return sources;\n  }\n\n  getSourceValue(nodeId) {\n    const [gateId] = nodeId.split(\":\");\n    if (this.gates[gateId]) {\n      return this.gates[gateId].outputById[nodeId].value;\n    } else if (this.inputById[nodeId]) {\n      return this.inputById[nodeId].value;\n    } else {\n      console.log(\"wtf???\", nodeId);\n      return 0;\n    }\n  }\n\n  updateNode(nodeId) {\n    const [gateId] = nodeId.split(\":\");\n    if (this.gates[gateId]) {\n      this.updateGate(gateId);\n    } else if (this.outputById[nodeId]) {\n      this.updateOutput(nodeId);\n    } else {\n      console.log(\"wtf???\", nodeId);\n    }\n  }\n\n  updateGate(gateId) {\n    const gate = this.gates[gateId];\n\n    for (const inputId of gate.inputs) {\n      const input = gate.inputById[inputId];\n      input.state = 0;\n      for (const source of this.allSources(input.id)) {\n        const value = this.getSourceValue(source);\n        if (value === 1) {\n          input.state = 1;\n          break;\n        }\n      }\n    }\n\n    gate.evaluate();\n\n    for (const outputId of gate.outputs) {\n      const output = gate.outputById[outputId];\n      for (const destination of this.allDestinations(output.id)) {\n        this.updateNode(destination);\n      }\n    }\n  }\n\n  updateOutput(outputId) {\n    const output = this.outputById[outputId];\n    output.state = 0;\n    for (const source of this.allSources(outputId)) {\n      const value = this.getSourceValue(source);\n      if (value === 1) {\n        output.state = 1;\n        break;\n      }\n    }\n  }\n\n  transformToGate(name) {\n    const inputsCount = this.inputs.length;\n    const outputsCount = this.outputs.length;\n\n    const gates = [];\n    for (const gate of Object.values(this.gates)) {\n      gates.push({\n        constructorClass: gate.constructor,\n        oldId: gate.id,\n      });\n    }\n\n    const connections = [];\n    for (const connection of this.connections) {\n      const [source, destination] = connection.split(\"-\");\n\n      const conn = {};\n\n      const [sourceGate, sourceId] = source.split(\":\");\n      const [destinationGate, destinationId] = destination.split(\":\");\n\n      if (this.inputById[source]) {\n        conn.source = {\n          type: \"self-input\",\n          nodeId: sourceId,\n          oldIndex: this.inputs.indexOf(source),\n        };\n      } else if (this.gates[sourceGate]) {\n        conn.source = {\n          type: \"gate-output\",\n          nodeId: sourceId,\n          gateId: sourceGate,\n        };\n      }\n\n      if (this.outputById[destination]) {\n        conn.destination = {\n          type: \"self-output\",\n          nodeId: sourceId,\n          oldIndex: this.outputs.indexOf(destination),\n        };\n      } else if (this.gates[destinationGate]) {\n        conn.destination = {\n          type: \"gate-input\",\n          nodeId: destinationId,\n          gateId: destinationGate,\n        };\n      }\n\n      connections.push(conn);\n    }\n\n    console.log(\"create class\", {\n      name,\n      inputsCount,\n      outputsCount,\n      gates,\n      connections,\n    });\n\n    const newCircuitClass = createCircuit(\n      name,\n      inputsCount,\n      outputsCount,\n      gates,\n      connections\n    );\n\n    return newCircuitClass;\n  }\n}\n\nconst createCircuit = (name, inputs, outputs, gates, connections, evalFn) => {\n  return class DynamicGate extends CircuitBase {\n    name = name;\n\n    constructor(x = 0, y = 0) {\n      super(inputs, outputs, gates, connections, evalFn);\n\n      this.position.x = x;\n      this.position.y = y;\n    }\n  };\n};\n\nconst InputNode = ({ input, connections, ...rest }) => {\n  return (\n    <div\n      id={input.id}\n      {...rest}\n      className={`circuit-input ${input.value === 1 ? \"circuit-input-on\" : \"\"}`}\n      style={{\n        left: input.position.x,\n        top: input.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst OutputNode = ({ output, connections, ...rest }) => {\n  return (\n    <div\n      id={output.id}\n      {...rest}\n      className={`circuit-output ${\n        output.value === 1 ? \"circuit-output-on\" : \"\"\n      }`}\n      style={{\n        right: output.position.x,\n        top: output.position.y,\n      }}\n    ></div>\n  );\n};\n\nconst GateNode = ({ gate, connections, onConnectionMade }) => {\n  return (\n    <div\n      id={gate.id}\n      className={`circuit-gate circuit-gate-${gate.type}`}\n      style={{\n        left: gate.position.x,\n        top: gate.position.y,\n      }}\n      onMouseDown={(e) => {\n        if (currentlyMovingGate) {\n          return;\n        }\n\n        currentlyMovingGate = {\n          gateId: gate.id,\n          startMousePos: {\n            x: e.clientX,\n            y: e.clientY,\n          },\n          startGatePos: {\n            x: gate.position.x,\n            y: gate.position.y,\n          },\n        };\n      }}\n    >\n      <div className=\"circuit-gate-inputs\">\n        {Object.values(gate.inputById).map((input) => (\n          <div\n            key={input.id}\n            id={input.id}\n            className={`circuit-gate-input ${\n              input.value === 1 ? \"circuit-gate-input-on\" : \"\"\n            }`}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnectionMade(connectionStart, input.id);\n              }\n\n              connectionStart = null;\n            }}\n          ></div>\n        ))}\n      </div>\n      <div className=\"circuit-gate-name\">{gate.name}</div>\n      <div className=\"circuit-gate-outputs\">\n        {Object.values(gate.outputById).map((output) => (\n          <div\n            key={output.id}\n            id={output.id}\n            className={`circuit-gate-output ${\n              output.value === 1 ? \"circuit-gate-output-on\" : \"\"\n            }`}\n            onMouseDown={(e) => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = output.id;\n              e.stopPropagation();\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Connection = ({ start, end, complete = false }) => {\n  let x1, y1, x2, y2;\n\n  const startNode = document.getElementById(start);\n  const endNode = document.getElementById(end);\n\n  if (complete) {\n    if (!startNode || !endNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n    const endPos = endNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = endPos.x + endPos.width / 2;\n    y2 = endPos.y + endPos.height / 2;\n  } else {\n    if (!startNode) {\n      return null;\n    }\n\n    const startPos = startNode.getBoundingClientRect();\n\n    x1 = startPos.x + startPos.width / 2;\n    y1 = startPos.y + startPos.height / 2;\n    x2 = mousePos.x;\n    y2 = mousePos.y;\n  }\n\n  return <line x1={x1} y1={y1} x2={x2} y2={y2} />;\n};\n\nconst EmptyCurcuit = createCircuit(\"BASE\", 0, 0, [], []);\n\nlet circuit = new EmptyCurcuit();\n\nconst AND_Gate = createCircuit(\"AND\", 2, 1, [], [], function (gate) {\n  const i1 = gate.inputById[gate.inputs[0]];\n  const i2 = gate.inputById[gate.inputs[1]];\n  const o1 = gate.outputById[gate.outputs[0]];\n\n  if (i1.value === 1 && i2.value === 1) {\n    o1.state = 1;\n  } else {\n    o1.state = 0;\n  }\n});\n\nconst NOT_Gate = createCircuit(\"NOT\", 1, 1, [], [], function (gate) {\n  const i1 = gate.inputById[gate.inputs[0]];\n  const o1 = gate.outputById[gate.outputs[0]];\n\n  if (i1.value === 1) {\n    o1.state = 0;\n  } else {\n    o1.state = 1;\n  }\n});\n\nlet connectionStart = null;\nlet currentlyMovingGate = null;\nlet mousePos = { x: 0, y: 0 };\nconst availableGates = [\n  { classPointer: AND_Gate, name: \"AND\" },\n  { classPointer: NOT_Gate, name: \"NOT\" },\n];\n\nwindow.circuit = circuit;\n\nfunction App() {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const onConnection = (a, b) => {\n    circuit.addConnection(a, b);\n\n    forceUpdate();\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"circuit\"\n        onMouseUp={() => {\n          connectionStart = null;\n          currentlyMovingGate = null;\n\n          forceUpdate();\n        }}\n        onMouseMove={(e) => {\n          if (connectionStart) {\n            mousePos.x = e.clientX;\n            mousePos.y = e.clientY;\n            forceUpdate();\n          }\n\n          if (currentlyMovingGate) {\n            const xDiff = e.clientX - currentlyMovingGate.startMousePos.x;\n            const yDiff = e.clientY - currentlyMovingGate.startMousePos.y;\n\n            const x = currentlyMovingGate.startGatePos.x + xDiff;\n            const y = currentlyMovingGate.startGatePos.y + yDiff;\n\n            circuit.gates[currentlyMovingGate.gateId].position.x = x;\n            circuit.gates[currentlyMovingGate.gateId].position.y = y;\n\n            forceUpdate();\n          }\n        }}\n      >\n        <div\n          className=\"circuit-inputs\"\n          onClick={(e) => {\n            circuit.addInput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        <div\n          className=\"circuit-outputs\"\n          onClick={(e) => {\n            circuit.addOutput(e.clientY - 20);\n            forceUpdate();\n          }}\n        />\n        {Object.values(circuit.inputById).map((input) => (\n          <InputNode\n            key={input.id}\n            input={input}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                circuit.removeInput(input.id);\n              } else {\n                input.toggle();\n                circuit\n                  .allDestinations(input.id)\n                  .forEach((destination) => circuit.updateNode(destination));\n              }\n\n              forceUpdate();\n            }}\n            onMouseDown={() => {\n              if (connectionStart) {\n                return;\n              }\n\n              connectionStart = input.id;\n            }}\n          />\n        ))}\n        {Object.values(circuit.outputById).map((output) => (\n          <OutputNode\n            key={output.id}\n            output={output}\n            connections={circuit.connections}\n            onClick={(e) => {\n              if (e.ctrlKey) {\n                circuit.removeOutput(output.id);\n              }\n              forceUpdate();\n            }}\n            onMouseUp={() => {\n              if (connectionStart) {\n                onConnection(connectionStart, output.id);\n              }\n\n              connectionStart = null;\n            }}\n          />\n        ))}\n        {Object.values(circuit.gates).map((gate) => (\n          <GateNode\n            key={gate.id}\n            gate={gate}\n            connections={circuit.connections}\n            onConnectionMade={onConnection}\n          />\n        ))}\n        <svg>\n          {Array.from(circuit.connections).map((connection) => {\n            const [start, end] = connection.split(\"-\");\n            return (\n              <Connection key={connection} complete start={start} end={end} />\n            );\n          })}\n          {connectionStart && (\n            <>\n              <Connection start={connectionStart} />\n            </>\n          )}\n        </svg>\n      </div>\n      <div className=\"tools\">\n        <div className=\"tools-save\">\n          <input\n            id=\"gate-name\"\n            className=\"tools-save-name\"\n            placeholder=\"New gate name\"\n          />\n          <button\n            className=\"tools-save-submit\"\n            onClick={(e) => {\n              const nameInput = document.getElementById(\"gate-name\");\n\n              if (nameInput.value.length) {\n                const gateClass = circuit.transformToGate(nameInput.value);\n\n                availableGates.push({\n                  name: nameInput.value,\n                  classPointer: gateClass,\n                });\n\n                nameInput.value = \"\";\n                circuit = new EmptyCurcuit();\n\n                forceUpdate();\n              }\n            }}\n          >\n            Create\n          </button>\n        </div>\n        <div className=\"tools-gates\">\n          {availableGates.map((gate) => (\n            <div>\n              <button\n                className=\"tools-gate\"\n                key={gate.name}\n                onClick={() => {\n                  circuit.addGate(gate.classPointer, 50, 20);\n                  forceUpdate();\n                }}\n              >\n                {gate.name}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}